"use strict";
var commascript = require('./commascript'),
    fs = require('fs'),
    path = require('path'),
    Logger = require('transport-logger');
function printHelp() {
  console.log('\nCommaScript validator, version \n\n' + 'Usage: commascript [options] [sources]\n\n' + 'Options:\n\n' + '  -s, --silent    No output except for results\n' + '  -v, --verbose     Verbose logging\n' + '  -V, --version   The current version of CommaScript\n' + '  -h, --help      Show this help menu\n');
}
module.exports = function(argv) {
  var pkg = require('../package.json'),
      files = [],
      i,
      len,
      logLevel = 'info',
      flagRegex = /^-/,
      arg;
  for (i = 2, len = argv.length; i < len; i++) {
    arg = argv[i];
    if (flagRegex.test(arg)) {
      if (argv[i] === '-s' || argv[i] === '--silent') {
        logLevel = 'none';
      } else if (argv[i] === '-v' || argv[i] === '--verbose') {
        logLevel = 'debug';
      } else if (argv[i] === '-h' || argv[i] === '--help') {
        printHelp();
        process.exit(0);
      } else if (argv[i] === '-V' || argv[i] === '--version') {
        console.log(pkg.version);
        process.exit(0);
      } else {
        console.error('Invalid flag "' + arg + '"');
        process.exit(1);
      }
    } else {
      if (!fs.existsSync(argv[i])) {
        console.error('File "' + argv[i] + '"does not exists');
        process.exit(1);
      }
      files.push(path.resolve(arg));
    }
  }
  commascript.validate(files, new Logger({
    minLevel: logLevel,
    colorize: true,
    prependLevel: true
  }));
};

//# sourceMappingURL=data:application/json;base64,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QUMsSUFBRyxRQUFRLEFBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9CO0FBQUEsRUFDRjtBQUFBLEFBR0EsWUFBVSxTQUFTLEFBQUMsQ0FBQyxLQUFJLENBQUcsSUFBSSxPQUFLLEFBQUMsQ0FBQztBQUNyQyxXQUFPLENBQUcsU0FBTztBQUNqQixXQUFPLENBQUcsS0FBRztBQUNiLGVBQVcsQ0FBRyxLQUFHO0FBQUEsRUFDbkIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBQ0QiLCJmaWxlIjoiY2xpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG5Db3B5cmlnaHQgKGMpIDIwMTMtMjAxNCBCcnlhbiBIdWdoZXMgPGJyeWFuQHRoZW9yZXRpY2FsaWRlYXRpb25zLmNvbT4gKGh0dHA6Ly90aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20pXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cbiovXG5cbnZhciBjb21tYXNjcmlwdCA9IHJlcXVpcmUoJy4vY29tbWFzY3JpcHQnKSxcbiAgICBmcyA9IHJlcXVpcmUoJ2ZzJyksXG4gICAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKSxcbiAgICBMb2dnZXIgPSByZXF1aXJlKCd0cmFuc3BvcnQtbG9nZ2VyJyk7XG5cbmZ1bmN0aW9uIHByaW50SGVscCgpIHtcbiAgY29uc29sZS5sb2coJ1xcbkNvbW1hU2NyaXB0IHZhbGlkYXRvciwgdmVyc2lvbiBcXG5cXG4nICtcbiAgICAnVXNhZ2U6IGNvbW1hc2NyaXB0IFtvcHRpb25zXSBbc291cmNlc11cXG5cXG4nICtcbiAgICAnT3B0aW9uczpcXG5cXG4nICtcbiAgICAnICAtcywgLS1zaWxlbnQgICAgTm8gb3V0cHV0IGV4Y2VwdCBmb3IgcmVzdWx0c1xcbicgK1xuICAgICcgIC12LCAtLXZlcmJvc2UgICAgIFZlcmJvc2UgbG9nZ2luZ1xcbicgK1xuICAgICcgIC1WLCAtLXZlcnNpb24gICBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIENvbW1hU2NyaXB0XFxuJyArXG4gICAgJyAgLWgsIC0taGVscCAgICAgIFNob3cgdGhpcyBoZWxwIG1lbnVcXG4nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndikge1xuICB2YXIgcGtnID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyksXG4gICAgICBmaWxlcyA9IFtdLFxuICAgICAgaSwgbGVuLFxuICAgICAgbG9nTGV2ZWwgPSAnaW5mbycsXG4gICAgICBmbGFnUmVnZXggPSAvXi0vLFxuICAgICAgYXJnO1xuXG4gIC8vIFZhbGlkYXRlIHRoZSBvcHRpb25zXG4gIGZvciAoaSA9IDIsIGxlbiA9IGFyZ3YubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcmcgPSBhcmd2W2ldO1xuICAgIGlmIChmbGFnUmVnZXgudGVzdChhcmcpKSB7XG4gICAgICBpZiAoYXJndltpXSA9PT0gJy1zJyB8fCBhcmd2W2ldID09PSAnLS1zaWxlbnQnKSB7XG4gICAgICAgIGxvZ0xldmVsID0gJ25vbmUnO1xuICAgICAgfSBlbHNlIGlmIChhcmd2W2ldID09PSAnLXYnIHx8IGFyZ3ZbaV0gPT09ICctLXZlcmJvc2UnKSB7XG4gICAgICAgIGxvZ0xldmVsID0gJ2RlYnVnJztcbiAgICAgIH0gZWxzZSBpZiAoYXJndltpXSA9PT0gJy1oJyB8fCBhcmd2W2ldID09PSAnLS1oZWxwJykge1xuICAgICAgICBwcmludEhlbHAoKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDApO1xuICAgICAgfSBlbHNlIGlmIChhcmd2W2ldID09PSAnLVYnIHx8IGFyZ3ZbaV0gPT09ICctLXZlcnNpb24nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHBrZy52ZXJzaW9uKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignSW52YWxpZCBmbGFnIFwiJyArIGFyZyArICdcIicpO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghZnMuZXhpc3RzU3luYyhhcmd2W2ldKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGaWxlIFwiJyArIGFyZ3ZbaV0gKyAnXCJkb2VzIG5vdCBleGlzdHMnKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgfVxuICAgICAgZmlsZXMucHVzaChwYXRoLnJlc29sdmUoYXJnKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gSW52b2tlIHRoZSB2YWxpZGF0b3Igd2l0aCB0aGUgcHJvcGVyIGxvZ2dlclxuICBjb21tYXNjcmlwdC52YWxpZGF0ZShmaWxlcywgbmV3IExvZ2dlcih7XG4gICAgbWluTGV2ZWw6IGxvZ0xldmVsLFxuICAgIGNvbG9yaXplOiB0cnVlLFxuICAgIHByZXBlbmRMZXZlbDogdHJ1ZVxuICB9KSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9