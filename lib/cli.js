"use strict";
Object.defineProperties(exports, {
  run: {get: function() {
      return run;
    }},
  __esModule: {value: true}
});
var $__fs__,
    $__path__,
    $__transport_45_logger__;
var fs = ($__fs__ = require("fs"), $__fs__ && $__fs__.__esModule && $__fs__ || {default: $__fs__}).default;
var path = ($__path__ = require("path"), $__path__ && $__path__.__esModule && $__path__ || {default: $__path__}).default;
var Logger = ($__transport_45_logger__ = require("transport-logger"), $__transport_45_logger__ && $__transport_45_logger__.__esModule && $__transport_45_logger__ || {default: $__transport_45_logger__}).default;
function printHelp() {
  console.log('\nCommaScript validator, version \n\n' + 'Usage: commascript [options] [sources]\n\n' + 'Options:\n\n' + '  -s, --silent    No output except for results\n' + '  -v, --verbose     Verbose logging\n' + '  -V, --version   The current version of CommaScript\n' + '  -h, --help      Show this help menu\n');
}
function run(argv) {
  var files = [];
  var logLevel = 'info';
  var flagRegex = /^-/;
  for (var i = 2,
      len = argv.length; i < len; i++) {
    var arg = argv[i];
    if (flagRegex.test(arg)) {
      if (argv[i] === '-s' || argv[i] === '--silent') {
        logLevel = 'none';
      } else if (argv[i] === '-v' || argv[i] === '--verbose') {
        logLevel = 'debug';
      } else if (argv[i] === '-h' || argv[i] === '--help') {
        printHelp();
        process.exit(0);
      } else if (argv[i] === '-V' || argv[i] === '--version') {
        console.log(require('../package.json').version);
        process.exit(0);
      } else {
        console.error('Invalid flag "' + arg + '"');
        process.exit(1);
      }
    } else {
      if (!fs.existsSync(argv[i])) {
        console.error('File "' + argv[i] + '"does not exists');
        process.exit(1);
      }
      files.push(path.resolve(arg));
    }
  }
  commascript.validate(files, new Logger({
    minLevel: logLevel,
    colorize: true,
    prependLevel: true
  }));
}
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaS5qcyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci82IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzQiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8yIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzUiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5QkE7QUN6QkEsS0FBSyxpQkFBaUIsQUFBQyxDQUFDLE9BQU07S0NBOUIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsZ0JBQXdCO0lBQUUsQURBOUIsQ0FBQztBRUF2QixXQUFTLENDQVQsRUFBQyxLQUFJLENEQU8sS0FBRyxBQ0FTLENBQUM7Q0pBeUIsQ0FBQzs7OztFRHlCNUMsR0FBQyxFTXpCUixFQUFDLFNBQW9CLENBQUEsT0FBTSxBQUFDLE1BQWtCLENBQ3RDLENBQUEsVUFBcUIsbUJBQTJCLENBQUEsVUFBcUIsR0FBSyxFQUFDLE9BQU0sU0FBbUIsQ0FEOUQsQUFDK0QsQ0FBQztFTnlCdkcsS0FBRyxFTTFCVixFQUFDLFdBQW9CLENBQUEsT0FBTSxBQUFDLFFBQWtCLENBQ3RDLENBQUEsWUFBcUIscUJBQTJCLENBQUEsWUFBcUIsR0FBSyxFQUFDLE9BQU0sV0FBbUIsQ0FEOUQsQUFDK0QsQ0FBQztFTjBCdkcsT0FBSyxFTTNCWixFQUFDLDBCQUFvQixDQUFBLE9BQU0sQUFBQyxvQkFBa0IsQ0FDdEMsQ0FBQSwyQkFBcUIsb0NBQTJCLENBQUEsMkJBQXFCLEdBQUssRUFBQyxPQUFNLDBCQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0FONEI5RyxPQUFTLFVBQVEsQ0FBQyxBQUFDLENBQUU7QUFDbkIsUUFBTSxJQUFJLEFBQUMsQ0FBQyx1Q0FBc0MsRUFDaEQsNkNBQTJDLENBQUEsQ0FDM0MsZUFBYSxDQUFBLENBQ2IsbURBQWlELENBQUEsQ0FDakQsd0NBQXNDLENBQUEsQ0FDdEMseURBQXVELENBQUEsQ0FDdkQsMENBQXdDLENBQUMsQ0FBQztBQUM5QztBQUFBLEFBRU8sT0FBUyxJQUFFLENBQUUsSUFBRyxDQUFHO0FBQ3hCLEFBQUksSUFBQSxDQUFBLEtBQUksRUFBSSxHQUFDLENBQUM7QUFDZCxBQUFJLElBQUEsQ0FBQSxRQUFPLEVBQUksT0FBSyxDQUFDO0FBQ3JCLEFBQUksSUFBQSxDQUFBLFNBQVEsRUFBSSxLQUFHLENBQUM7QUFHcEIsTUFBUyxHQUFBLENBQUEsQ0FBQSxFQUFJLEVBQUE7QUFBRyxRQUFFLEVBQUksQ0FBQSxJQUFHLE9BQU8sQ0FBRyxDQUFBLENBQUEsRUFBSSxJQUFFLENBQUcsQ0FBQSxDQUFBLEVBQUUsQ0FBRztBQUMvQyxBQUFJLE1BQUEsQ0FBQSxHQUFFLEVBQUksQ0FBQSxJQUFHLENBQUUsQ0FBQSxDQUFDLENBQUM7QUFDakIsT0FBSSxTQUFRLEtBQUssQUFBQyxDQUFDLEdBQUUsQ0FBQyxDQUFHO0FBQ3ZCLFNBQUksSUFBRyxDQUFFLENBQUEsQ0FBQyxJQUFNLEtBQUcsQ0FBQSxFQUFLLENBQUEsSUFBRyxDQUFFLENBQUEsQ0FBQyxJQUFNLFdBQVMsQ0FBRztBQUM5QyxlQUFPLEVBQUksT0FBSyxDQUFDO01BQ25CLEtBQU8sS0FBSSxJQUFHLENBQUUsQ0FBQSxDQUFDLElBQU0sS0FBRyxDQUFBLEVBQUssQ0FBQSxJQUFHLENBQUUsQ0FBQSxDQUFDLElBQU0sWUFBVSxDQUFHO0FBQ3RELGVBQU8sRUFBSSxRQUFNLENBQUM7TUFDcEIsS0FBTyxLQUFJLElBQUcsQ0FBRSxDQUFBLENBQUMsSUFBTSxLQUFHLENBQUEsRUFBSyxDQUFBLElBQUcsQ0FBRSxDQUFBLENBQUMsSUFBTSxTQUFPLENBQUc7QUFDbkQsZ0JBQVEsQUFBQyxFQUFDLENBQUM7QUFDWCxjQUFNLEtBQUssQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO01BQ2pCLEtBQU8sS0FBSSxJQUFHLENBQUUsQ0FBQSxDQUFDLElBQU0sS0FBRyxDQUFBLEVBQUssQ0FBQSxJQUFHLENBQUUsQ0FBQSxDQUFDLElBQU0sWUFBVSxDQUFHO0FBQ3RELGNBQU0sSUFBSSxBQUFDLENBQUMsT0FBTSxBQUFDLENBQUMsaUJBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0MsY0FBTSxLQUFLLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztNQUNqQixLQUFPO0FBQ0wsY0FBTSxNQUFNLEFBQUMsQ0FBQyxnQkFBZSxFQUFJLElBQUUsQ0FBQSxDQUFJLElBQUUsQ0FBQyxDQUFDO0FBQzNDLGNBQU0sS0FBSyxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7TUFDakI7QUFBQSxJQUNGLEtBQU87QUFDTCxTQUFJLENBQUMsRUFBQyxXQUFXLEFBQUMsQ0FBQyxJQUFHLENBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBRztBQUMzQixjQUFNLE1BQU0sQUFBQyxDQUFDLFFBQU8sRUFBSSxDQUFBLElBQUcsQ0FBRSxDQUFBLENBQUMsQ0FBQSxDQUFJLG1CQUFpQixDQUFDLENBQUM7QUFDdEQsY0FBTSxLQUFLLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztNQUNqQjtBQUFBLEFBQ0EsVUFBSSxLQUFLLEFBQUMsQ0FBQyxJQUFHLFFBQVEsQUFBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0I7QUFBQSxFQUNGO0FBQUEsQUFHQSxZQUFVLFNBQVMsQUFBQyxDQUFDLEtBQUksQ0FBRyxJQUFJLE9BQUssQUFBQyxDQUFDO0FBQ3JDLFdBQU8sQ0FBRyxTQUFPO0FBQ2pCLFdBQU8sQ0FBRyxLQUFHO0FBQ2IsZUFBVyxDQUFHLEtBQUc7QUFBQSxFQUNuQixDQUFDLENBQUMsQ0FBQztBQUNMO0FBQUEsQUFBQztBQUNEIiwiZmlsZSI6ImNsaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSAyMDEzLTIwMTQgQnJ5YW4gSHVnaGVzIDxicnlhbkB0aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20+IChodHRwOi8vdGhlb3JldGljYWxpZGVhdGlvbnMuY29tKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG4qL1xuXG4vL2ltcG9ydCBjb21tYXNjcmlwdCBmcm9tICcuL2NvbW1hc2NyaXB0JztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBMb2dnZXIgZnJvbSAndHJhbnNwb3J0LWxvZ2dlcic7XG5cbmZ1bmN0aW9uIHByaW50SGVscCgpIHtcbiAgY29uc29sZS5sb2coJ1xcbkNvbW1hU2NyaXB0IHZhbGlkYXRvciwgdmVyc2lvbiBcXG5cXG4nICtcbiAgICAnVXNhZ2U6IGNvbW1hc2NyaXB0IFtvcHRpb25zXSBbc291cmNlc11cXG5cXG4nICtcbiAgICAnT3B0aW9uczpcXG5cXG4nICtcbiAgICAnICAtcywgLS1zaWxlbnQgICAgTm8gb3V0cHV0IGV4Y2VwdCBmb3IgcmVzdWx0c1xcbicgK1xuICAgICcgIC12LCAtLXZlcmJvc2UgICAgIFZlcmJvc2UgbG9nZ2luZ1xcbicgK1xuICAgICcgIC1WLCAtLXZlcnNpb24gICBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIENvbW1hU2NyaXB0XFxuJyArXG4gICAgJyAgLWgsIC0taGVscCAgICAgIFNob3cgdGhpcyBoZWxwIG1lbnVcXG4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bihhcmd2KSB7XG4gIHZhciBmaWxlcyA9IFtdO1xuICB2YXIgbG9nTGV2ZWwgPSAnaW5mbyc7XG4gIHZhciBmbGFnUmVnZXggPSAvXi0vO1xuXG4gIC8vIFZhbGlkYXRlIHRoZSBvcHRpb25zXG4gIGZvciAodmFyIGkgPSAyLCBsZW4gPSBhcmd2Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3ZbaV07XG4gICAgaWYgKGZsYWdSZWdleC50ZXN0KGFyZykpIHtcbiAgICAgIGlmIChhcmd2W2ldID09PSAnLXMnIHx8IGFyZ3ZbaV0gPT09ICctLXNpbGVudCcpIHtcbiAgICAgICAgbG9nTGV2ZWwgPSAnbm9uZSc7XG4gICAgICB9IGVsc2UgaWYgKGFyZ3ZbaV0gPT09ICctdicgfHwgYXJndltpXSA9PT0gJy0tdmVyYm9zZScpIHtcbiAgICAgICAgbG9nTGV2ZWwgPSAnZGVidWcnO1xuICAgICAgfSBlbHNlIGlmIChhcmd2W2ldID09PSAnLWgnIHx8IGFyZ3ZbaV0gPT09ICctLWhlbHAnKSB7XG4gICAgICAgIHByaW50SGVscCgpO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMCk7XG4gICAgICB9IGVsc2UgaWYgKGFyZ3ZbaV0gPT09ICctVicgfHwgYXJndltpXSA9PT0gJy0tdmVyc2lvbicpIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbik7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgZmxhZyBcIicgKyBhcmcgKyAnXCInKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoYXJndltpXSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmlsZSBcIicgKyBhcmd2W2ldICsgJ1wiZG9lcyBub3QgZXhpc3RzJyk7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgIH1cbiAgICAgIGZpbGVzLnB1c2gocGF0aC5yZXNvbHZlKGFyZykpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEludm9rZSB0aGUgdmFsaWRhdG9yIHdpdGggdGhlIHByb3BlciBsb2dnZXJcbiAgY29tbWFzY3JpcHQudmFsaWRhdGUoZmlsZXMsIG5ldyBMb2dnZXIoe1xuICAgIG1pbkxldmVsOiBsb2dMZXZlbCxcbiAgICBjb2xvcml6ZTogdHJ1ZSxcbiAgICBwcmVwZW5kTGV2ZWw6IHRydWVcbiAgfSkpO1xufTtcbiIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGV4cG9ydHMsICRfX3BsYWNlaG9sZGVyX18wKTsiLCJ7Z2V0OiAkX19wbGFjZWhvbGRlcl9fMH0iLCJnZXQgJF9fcGxhY2Vob2xkZXJfXzAoKSB7IHJldHVybiAkX19wbGFjZWhvbGRlcl9fMTsgfSIsIl9fZXNNb2R1bGU6IHRydWUiLCJ7dmFsdWU6ICRfX3BsYWNlaG9sZGVyX18wfSIsIigkX19wbGFjZWhvbGRlcl9fMCA9IHJlcXVpcmUoJF9fcGxhY2Vob2xkZXJfXzEpLCBcbiAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzIgJiYgJF9fcGxhY2Vob2xkZXJfXzMuX19lc01vZHVsZSAmJiAkX19wbGFjZWhvbGRlcl9fNCB8fCB7ZGVmYXVsdDogJF9fcGxhY2Vob2xkZXJfXzV9KSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==