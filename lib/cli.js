"use strict";
Object.defineProperties(exports, {
  run: {get: function() {
      return run;
    }},
  __esModule: {value: true}
});
var $__commascript__,
    $__fs__,
    $__path__,
    $__transport_45_logger__;
var validate = ($__commascript__ = require("./commascript"), $__commascript__ && $__commascript__.__esModule && $__commascript__ || {default: $__commascript__}).validate;
var fs = ($__fs__ = require("fs"), $__fs__ && $__fs__.__esModule && $__fs__ || {default: $__fs__}).default;
var path = ($__path__ = require("path"), $__path__ && $__path__.__esModule && $__path__ || {default: $__path__}).default;
var Logger = ($__transport_45_logger__ = require("transport-logger"), $__transport_45_logger__ && $__transport_45_logger__.__esModule && $__transport_45_logger__ || {default: $__transport_45_logger__}).default;
function printHelp() {
  console.log('\nCommaScript validator, version \n\n' + 'Usage: commascript [options] [sources]\n\n' + 'Options:\n\n' + '  -s, --silent    No output except for results\n' + '  -v, --verbose     Verbose logging\n' + '  -V, --version   The current version of CommaScript\n' + '  -h, --help      Show this help menu\n');
}
function run(argv) {
  var files = [];
  var logLevel = 'info';
  var flagRegex = /^-/;
  for (var i = 2,
      len = argv.length; i < len; i++) {
    var arg = argv[i];
    if (flagRegex.test(arg)) {
      if (argv[i] === '-s' || argv[i] === '--silent') {
        logLevel = 'none';
      } else if (argv[i] === '-v' || argv[i] === '--verbose') {
        logLevel = 'debug';
      } else if (argv[i] === '-h' || argv[i] === '--help') {
        printHelp();
        process.exit(0);
      } else if (argv[i] === '-V' || argv[i] === '--version') {
        console.log(require('../package.json').version);
        process.exit(0);
      } else {
        console.error('Invalid flag "' + arg + '"');
        process.exit(1);
      }
    } else {
      if (!fs.existsSync(argv[i])) {
        console.error('File "' + argv[i] + '"does not exists');
        process.exit(1);
      }
      files.push(path.resolve(arg));
    }
  }
  validate(files, new Logger({
    minLevel: logLevel,
    colorize: true,
    prependLevel: true
  }));
}
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaS5qcyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci82IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzQiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8yIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzUiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QkE7QUN4QkEsS0FBSyxpQkFBaUIsQUFBQyxDQUFDLE9BQU07S0NBOUIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsZ0JBQXdCO0lBQUUsQURBOUIsQ0FBQztBRUF2QixXQUFTLENDQVQsRUFBQyxLQUFJLENEQU8sS0FBRyxBQ0FTLENBQUM7Q0pBeUIsQ0FBQzs7Ozs7RUR3QjFDLFNBQU8sRU14QmhCLEVBQUMsa0JBQW9CLENBQUEsT0FBTSxBQUFDLGlCQUFrQixDQUN0QyxDQUFBLG1CQUFxQiw0QkFBMkIsQ0FBQSxtQkFBcUIsR0FBSyxFQUFDLE9BQU0sa0JBQW1CLENBRDlELEFBQytELENBQUM7RU53QnZHLEdBQUMsRU16QlIsRUFBQyxTQUFvQixDQUFBLE9BQU0sQUFBQyxNQUFrQixDQUN0QyxDQUFBLFVBQXFCLG1CQUEyQixDQUFBLFVBQXFCLEdBQUssRUFBQyxPQUFNLFNBQW1CLENBRDlELEFBQytELENBQUM7RU55QnZHLEtBQUcsRU0xQlYsRUFBQyxXQUFvQixDQUFBLE9BQU0sQUFBQyxRQUFrQixDQUN0QyxDQUFBLFlBQXFCLHFCQUEyQixDQUFBLFlBQXFCLEdBQUssRUFBQyxPQUFNLFdBQW1CLENBRDlELEFBQytELENBQUM7RU4wQnZHLE9BQUssRU0zQlosRUFBQywwQkFBb0IsQ0FBQSxPQUFNLEFBQUMsb0JBQWtCLENBQ3RDLENBQUEsMkJBQXFCLG9DQUEyQixDQUFBLDJCQUFxQixH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IjoiY2xpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG5Db3B5cmlnaHQgKGMpIDIwMTMtMjAxNCBCcnlhbiBIdWdoZXMgPGJyeWFuQHRoZW9yZXRpY2FsaWRlYXRpb25zLmNvbT4gKGh0dHA6Ly90aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20pXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cbiovXG5cbmltcG9ydCB7IHZhbGlkYXRlIH0gZnJvbSAnLi9jb21tYXNjcmlwdCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJ3RyYW5zcG9ydC1sb2dnZXInO1xuXG5mdW5jdGlvbiBwcmludEhlbHAoKSB7XG4gIGNvbnNvbGUubG9nKCdcXG5Db21tYVNjcmlwdCB2YWxpZGF0b3IsIHZlcnNpb24gXFxuXFxuJyArXG4gICAgJ1VzYWdlOiBjb21tYXNjcmlwdCBbb3B0aW9uc10gW3NvdXJjZXNdXFxuXFxuJyArXG4gICAgJ09wdGlvbnM6XFxuXFxuJyArXG4gICAgJyAgLXMsIC0tc2lsZW50ICAgIE5vIG91dHB1dCBleGNlcHQgZm9yIHJlc3VsdHNcXG4nICtcbiAgICAnICAtdiwgLS12ZXJib3NlICAgICBWZXJib3NlIGxvZ2dpbmdcXG4nICtcbiAgICAnICAtViwgLS12ZXJzaW9uICAgVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBDb21tYVNjcmlwdFxcbicgK1xuICAgICcgIC1oLCAtLWhlbHAgICAgICBTaG93IHRoaXMgaGVscCBtZW51XFxuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydW4oYXJndikge1xuICB2YXIgZmlsZXMgPSBbXTtcbiAgdmFyIGxvZ0xldmVsID0gJ2luZm8nO1xuICB2YXIgZmxhZ1JlZ2V4ID0gL14tLztcblxuICAvLyBWYWxpZGF0ZSB0aGUgb3B0aW9uc1xuICBmb3IgKHZhciBpID0gMiwgbGVuID0gYXJndi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBhcmcgPSBhcmd2W2ldO1xuICAgIGlmIChmbGFnUmVnZXgudGVzdChhcmcpKSB7XG4gICAgICBpZiAoYXJndltpXSA9PT0gJy1zJyB8fCBhcmd2W2ldID09PSAnLS1zaWxlbnQnKSB7XG4gICAgICAgIGxvZ0xldmVsID0gJ25vbmUnO1xuICAgICAgfSBlbHNlIGlmIChhcmd2W2ldID09PSAnLXYnIHx8IGFyZ3ZbaV0gPT09ICctLXZlcmJvc2UnKSB7XG4gICAgICAgIGxvZ0xldmVsID0gJ2RlYnVnJztcbiAgICAgIH0gZWxzZSBpZiAoYXJndltpXSA9PT0gJy1oJyB8fCBhcmd2W2ldID09PSAnLS1oZWxwJykge1xuICAgICAgICBwcmludEhlbHAoKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDApO1xuICAgICAgfSBlbHNlIGlmIChhcmd2W2ldID09PSAnLVYnIHx8IGFyZ3ZbaV0gPT09ICctLXZlcnNpb24nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb24pO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIGZsYWcgXCInICsgYXJnICsgJ1wiJyk7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGFyZ3ZbaV0pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZpbGUgXCInICsgYXJndltpXSArICdcImRvZXMgbm90IGV4aXN0cycpO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICB9XG4gICAgICBmaWxlcy5wdXNoKHBhdGgucmVzb2x2ZShhcmcpKTtcbiAgICB9XG4gIH1cblxuICAvLyBJbnZva2UgdGhlIHZhbGlkYXRvciB3aXRoIHRoZSBwcm9wZXIgbG9nZ2VyXG4gIHZhbGlkYXRlKGZpbGVzLCBuZXcgTG9nZ2VyKHtcbiAgICBtaW5MZXZlbDogbG9nTGV2ZWwsXG4gICAgY29sb3JpemU6IHRydWUsXG4gICAgcHJlcGVuZExldmVsOiB0cnVlXG4gIH0pKTtcbn07XG4iLCJPYmplY3QuZGVmaW5lUHJvcGVydGllcyhleHBvcnRzLCAkX19wbGFjZWhvbGRlcl9fMCk7Iiwie2dldDogJF9fcGxhY2Vob2xkZXJfXzB9IiwiZ2V0ICRfX3BsYWNlaG9sZGVyX18wKCkgeyByZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzE7IH0iLCJfX2VzTW9kdWxlOiB0cnVlIiwie3ZhbHVlOiAkX19wbGFjZWhvbGRlcl9fMH0iLCIoJF9fcGxhY2Vob2xkZXJfXzAgPSByZXF1aXJlKCRfX3BsYWNlaG9sZGVyX18xKSwgXG4gICAgICAgICRfX3BsYWNlaG9sZGVyX18yICYmICRfX3BsYWNlaG9sZGVyX18zLl9fZXNNb2R1bGUgJiYgJF9fcGxhY2Vob2xkZXJfXzQgfHwge2RlZmF1bHQ6ICRfX3BsYWNlaG9sZGVyX181fSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=