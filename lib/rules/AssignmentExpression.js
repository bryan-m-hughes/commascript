"use strict";
var $___46__46__47_node__,
    $___46__46__47_type__;
var $__0 = ($___46__46__47_node__ = require("../node"), $___46__46__47_node__ && $___46__46__47_node__.__esModule && $___46__46__47_node__ || {default: $___46__46__47_node__}),
    registerNodeProcessor = $__0.registerNodeProcessor,
    processNode = $__0.processNode;
var $__1 = ($___46__46__47_type__ = require("../type"), $___46__46__47_type__ && $___46__46__47_type__.__esModule && $___46__46__47_type__ || {default: $___46__46__47_type__}),
    NumberType = $__1.NumberType,
    StringType = $__1.StringType,
    InvalidType = $__1.InvalidType,
    compareTypes = $__1.compareTypes;
registerNodeProcessor({
  name: 'AssignmentExpression',
  parseExpression: function(node) {
    debugger;
    switch (node.left.type) {
      case 'Identifier':
        var leftType = processNode(node.left);
        var rightType = processNode(node.right);
        if (leftType instanceof InvalidType || rightType instanceof InvalidType) {
          return leftType;
        }
        if (node.operator == '=') {
          compareTypes(leftType, processNode(node.right), {node: node.right});
          return leftType;
        } else {
          var intermediateType = processNode({
            type: 'BinaryExpression',
            operator: node.operator,
            left: node.left,
            right: node.right
          });
          if (intermediateType instanceof InvalidType) {
            return intermediateType;
          }
          compareTypes(leftType, intermediateType, {node: node.right});
          return leftType;
        }
      case 'ObjectPattern':
        throw new Error('Not Implemented');
        break;
      case 'ArrayPattern':
        throw new Error('Not Implemented');
        break;
      default:
        handleInternalError('Unknown pattern type ' + node.type);
    }
  },
  scan: function(node) {
    processNode(node.left);
    processNode(node.right);
  },
  declare: function(node) {
    throw new Error('Not Implemented');
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL0Fzc2lnbm1lbnRFeHByZXNzaW9uLmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0JBOzs7U0N4QkEsRUFBQyx1QkFBb0IsQ0FBQSxPQUFNLEFBQUMsV0FBa0IsQ0FDdEMsQ0FBQSx3QkFBcUIsaUNBQTJCLENBQUEsd0JBQXFCLEdBQUssRUFBQyxPQUFNLHVCQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0FEdUJyRyx3QkFBb0I7QUFBRyxjQUFVO1NDeEIxQyxFQUFDLHVCQUFvQixDQUFBLE9BQU0sQUFBQyxXQUFrQixDQUN0QyxDQUFBLHdCQUFxQixpQ0FBMkIsQ0FBQSx3QkFBcUIsR0FBSyxFQUFDLE9BQU0sdUJBQW1CLENBRDlELEFBQytELENBQUM7QUR3QnJHLGFBQVM7QUFBRyxhQUFTO0FBQUcsY0FBVTtBQUFHLGVBQVc7QUFFekQsb0JBQW9CLEFBQUMsQ0FBQztBQUVwQixLQUFHLENBQUcsdUJBQXFCO0FBRTNCLGdCQUFjLENBQWQsVUFBZ0IsSUFBRyxDQUFHO0FBQ3BCLFlBQVE7QUFDUixXQUFPLElBQUcsS0FBSyxLQUFLO0FBQ2xCLFNBQUssYUFBVztBQUNkLEFBQUksVUFBQSxDQUFBLFFBQU8sRUFBSSxDQUFBLFdBQVUsQUFBQyxDQUFDLElBQUcsS0FBSyxDQUFDLENBQUM7QUFDckMsQUFBSSxVQUFBLENBQUEsU0FBUSxFQUFJLENBQUEsV0FBVSxBQUFDLENBQUMsSUFBRyxNQUFNLENBQUMsQ0FBQztBQUN2QyxXQUFJLFFBQU8sV0FBYSxZQUFVLENBQUEsRUFBSyxDQUFBLFNBQVEsV0FBYSxZQUFVLENBQUc7QUFDdkUsZUFBTyxTQUFPLENBQUM7UUFDakI7QUFBQSxBQUNBLFdBQUksSUFBRyxTQUFTLEdBQUssSUFBRSxDQUFHO0FBQ3hCLHFCQUFXLEFBQUMsQ0FBQyxRQUFPLENBQUcsQ0FBQSxXQUFVLEFBQUMsQ0FBQyxJQUFHLE1BQU0sQ0FBQyxDQUFHLEVBQzlDLElBQUcsQ0FBRyxDQUFBLElBQUcsTUFBTSxDQUNqQixDQUFDLENBQUM7QUFDRixlQUFPLFNBQU8sQ0FBQztRQUNqQixLQUFPO0FBQ0wsQUFBSSxZQUFBLENBQUEsZ0JBQWUsRUFBSSxDQUFBLFdBQVUsQUFBQyxDQUFDO0FBQ2pDLGVBQUcsQ0FBRyxtQkFBaUI7QUFDdkIsbUJBQU8sQ0FBRyxDQUFBLElBQUcsU0FBUztBQUN0QixlQUFHLENBQUcsQ0FBQSxJQUFHLEtBQUs7QUFDZCxnQkFBSSxDQUFHLENBQUEsSUFBRyxNQUFNO0FBQUEsVUFDbEIsQ0FBQyxDQUFDO0FBQ0YsYUFBSSxnQkFBZSxXQUFhLFlBQVUsQ0FBRztBQUMzQyxpQkFBTyxpQkFBZSxDQUFDO1VBQ3pCO0FBQUEsQUFDQSxxQkFBVyxBQUFDLENBQUMsUUFBTyxDQUFHLGlCQUFlLENBQUcsRUFDdkMsSUFBRyxDQUFHLENBQUEsSUFBRyxNQUFNLENBQ2pCLENBQUMsQ0FBQztBQUNGLGVBQU8sU0FBTyxDQUFDO1FBQ2pCO0FBQUEsQUFDRixTQUFLLGdCQUFjO0FBQ2pCLFlBQU0sSUFBSSxNQUFJLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQyxDQUFDO0FBQ2xDLGFBQUs7QUFBQSxBQUNQLFNBQUssZUFBYTtBQUNoQixZQUFNLElBQUksTUFBSSxBQUFDLENBQUMsaUJBQWdCLENBQUMsQ0FBQztBQUNsQyxhQUFLO0FBQUEsQUFDUDtBQUNFLDBCQUFrQixBQUFDLENBQUMsdUJBQXNCLEVBQUksQ0FBQSxJQUFHLEtBQUssQ0FBQyxDQUFDO0FBRG5ELElBRVQ7RUFDRjtBQUVBLEtBQUcsQ0FBSCxVQUFLLElBQUcsQ0FBRztBQUNULGNBQVUsQUFBQyxDQUFDLElBQUcsS0FBSyxDQUFDLENBQUM7QUFDdEIsY0FBVSxBQUFDLENBQUMsSUFBRyxNQUFNLENBQUMsQ0FBQztFQUN6QjtBQUVBLFFBQU0sQ0FBTixVQUFRLElBQUcsQ0FBRztBQUNaLFFBQU0sSUFBSSxNQUFJLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQyxDQUFDO0VBQ3BDO0FBQUEsQUFFRixDQUFDLENBQUM7QUFDRiIsImZpbGUiOiJydWxlcy9Bc3NpZ25tZW50RXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSAyMDEzLTIwMTQgQnJ5YW4gSHVnaGVzIDxicnlhbkB0aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20+IChodHRwOi8vdGhlb3JldGljYWxpZGVhdGlvbnMuY29tKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgeyByZWdpc3Rlck5vZGVQcm9jZXNzb3IsIHByb2Nlc3NOb2RlIH0gZnJvbSAnLi4vbm9kZSc7XG5pbXBvcnQgeyBOdW1iZXJUeXBlLCBTdHJpbmdUeXBlLCBJbnZhbGlkVHlwZSwgY29tcGFyZVR5cGVzIH0gZnJvbSAnLi4vdHlwZSc7XG5cbnJlZ2lzdGVyTm9kZVByb2Nlc3Nvcih7XG5cbiAgbmFtZTogJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJyxcblxuICBwYXJzZUV4cHJlc3Npb24obm9kZSkge1xuICAgIGRlYnVnZ2VyO1xuICAgIHN3aXRjaChub2RlLmxlZnQudHlwZSkge1xuICAgICAgY2FzZSAnSWRlbnRpZmllcic6XG4gICAgICAgIHZhciBsZWZ0VHlwZSA9IHByb2Nlc3NOb2RlKG5vZGUubGVmdCk7XG4gICAgICAgIHZhciByaWdodFR5cGUgPSBwcm9jZXNzTm9kZShub2RlLnJpZ2h0KTtcbiAgICAgICAgaWYgKGxlZnRUeXBlIGluc3RhbmNlb2YgSW52YWxpZFR5cGUgfHwgcmlnaHRUeXBlIGluc3RhbmNlb2YgSW52YWxpZFR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gbGVmdFR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUub3BlcmF0b3IgPT0gJz0nKSB7XG4gICAgICAgICAgY29tcGFyZVR5cGVzKGxlZnRUeXBlLCBwcm9jZXNzTm9kZShub2RlLnJpZ2h0KSwge1xuICAgICAgICAgICAgbm9kZTogbm9kZS5yaWdodFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBsZWZ0VHlwZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW50ZXJtZWRpYXRlVHlwZSA9IHByb2Nlc3NOb2RlKHtcbiAgICAgICAgICAgIHR5cGU6ICdCaW5hcnlFeHByZXNzaW9uJyxcbiAgICAgICAgICAgIG9wZXJhdG9yOiBub2RlLm9wZXJhdG9yLFxuICAgICAgICAgICAgbGVmdDogbm9kZS5sZWZ0LFxuICAgICAgICAgICAgcmlnaHQ6IG5vZGUucmlnaHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoaW50ZXJtZWRpYXRlVHlwZSBpbnN0YW5jZW9mIEludmFsaWRUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJtZWRpYXRlVHlwZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29tcGFyZVR5cGVzKGxlZnRUeXBlLCBpbnRlcm1lZGlhdGVUeXBlLCB7XG4gICAgICAgICAgICBub2RlOiBub2RlLnJpZ2h0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGxlZnRUeXBlO1xuICAgICAgICB9XG4gICAgICBjYXNlICdPYmplY3RQYXR0ZXJuJzpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgSW1wbGVtZW50ZWQnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdBcnJheVBhdHRlcm4nOlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBJbXBsZW1lbnRlZCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGhhbmRsZUludGVybmFsRXJyb3IoJ1Vua25vd24gcGF0dGVybiB0eXBlICcgKyBub2RlLnR5cGUpO1xuICAgIH1cbiAgfSxcblxuICBzY2FuKG5vZGUpIHtcbiAgICBwcm9jZXNzTm9kZShub2RlLmxlZnQpO1xuICAgIHByb2Nlc3NOb2RlKG5vZGUucmlnaHQpO1xuICB9LFxuXG4gIGRlY2xhcmUobm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm90IEltcGxlbWVudGVkJyk7XG4gIH1cblxufSk7XG4iLCIoJF9fcGxhY2Vob2xkZXJfXzAgPSByZXF1aXJlKCRfX3BsYWNlaG9sZGVyX18xKSwgXG4gICAgICAgICRfX3BsYWNlaG9sZGVyX18yICYmICRfX3BsYWNlaG9sZGVyX18zLl9fZXNNb2R1bGUgJiYgJF9fcGxhY2Vob2xkZXJfXzQgfHwge2RlZmF1bHQ6ICRfX3BsYWNlaG9sZGVyX181fSkiXX0=