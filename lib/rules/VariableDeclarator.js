"use strict";
var $___46__46__47_node__,
    $___46__46__47_state__,
    $___46__46__47_type__;
var $__0 = ($___46__46__47_node__ = require("../node"), $___46__46__47_node__ && $___46__46__47_node__.__esModule && $___46__46__47_node__ || {default: $___46__46__47_node__}),
    registerNodeProcessor = $__0.registerNodeProcessor,
    processNode = $__0.processNode;
var $__1 = ($___46__46__47_state__ = require("../state"), $___46__46__47_state__ && $___46__46__47_state__.__esModule && $___46__46__47_state__ || {default: $___46__46__47_state__}),
    addNamedType = $__1.addNamedType,
    enterState = $__1.enterState,
    exitState = $__1.exitState,
    states = $__1.states,
    handleError = $__1.handleError,
    handleInternalError = $__1.handleInternalError;
var NullType = ($___46__46__47_type__ = require("../type"), $___46__46__47_type__ && $___46__46__47_type__.__esModule && $___46__46__47_type__ || {default: $___46__46__47_type__}).NullType;
registerNodeProcessor({
  name: 'VariableDeclarator',
  parseStatement: function(node) {
    switch (node.id.type) {
      case 'Identifier':
        if (!node.init) {
          handleError(node, 'Variable declarations must have an initializer');
        } else {
          enterState(states.PARSING_EXPRESSION);
          var type = processNode(node.init);
          if (type instanceof NullType) {
            handleError(node, 'Cannot initialize variables to "null" because it is ambiguous.' + ' Try casting null to a named type?');
          } else {
            if (!type.declarationLocation) {
              type.declarationLocation = node.loc.start;
            }
            addNamedType(node.id.name, type);
          }
          exitState();
        }
        break;
      case 'ObjectPattern':
        throw new Error('Not Implemented');
        break;
      case 'ArrayPattern':
        throw new Error('Not Implemented');
        break;
      default:
        handleInternalError('Unknown pattern type ' + node.type);
    }
    return {result: 'normal'};
  },
  scan: function(node) {
    throw new Error('Not Implemented');
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL1ZhcmlhYmxlRGVjbGFyYXRvci5qcyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdCQTs7OztTQ3hCQSxFQUFDLHVCQUFvQixDQUFBLE9BQU0sQUFBQyxXQUFrQixDQUN0QyxDQUFBLHdCQUFxQixpQ0FBMkIsQ0FBQSx3QkFBcUIsR0FBSyxFQUFDLE9BQU0sdUJBQW1CLENBRDlELEFBQytELENBQUM7QUR1QnJHLHdCQUFvQjtBQUFHLGNBQVU7U0N4QjFDLEVBQUMsd0JBQW9CLENBQUEsT0FBTSxBQUFDLFlBQWtCLENBQ3RDLENBQUEseUJBQXFCLGtDQUEyQixDQUFBLHlCQUFxQixHQUFLLEVBQUMsT0FBTSx3QkFBbUIsQ0FEOUQsQUFDK0QsQ0FBQztBRHdCckcsZUFBVztBQUFHLGFBQVM7QUFBRyxZQUFRO0FBQUcsU0FBSztBQUFHLGNBQVU7QUFBRyxzQkFBa0I7RUFDNUUsU0FBTyxFQzFCaEIsRUFBQyx1QkFBb0IsQ0FBQSxPQUFNLEFBQUMsV0FBa0IsQ0FDdEMsQ0FBQSx3QkFBcUIsaUNBQTJCLENBQUEsd0JBQXFCLEdBQUssRUFBQyxPQUFNLHVCQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0FEMkI5RyxvQkFBb0IsQUFBQyxDQUFDO0FBRXBCLEtBQUcsQ0FBRyxxQkFBbUI7QUFFekIsZUFBYSxDQUFiLFVBQWUsSUFBRyxDQUFHO0FBRW5CLFdBQU8sSUFBRyxHQUFHLEtBQUs7QUFDaEIsU0FBSyxhQUFXO0FBQ2QsV0FBSSxDQUFDLElBQUcsS0FBSyxDQUFHO0FBQ2Qsb0JBQVUsQUFBQyxDQUFDLElBQUcsQ0FBRyxpREFBK0MsQ0FBQyxDQUFDO1FBQ3JFLEtBQU87QUFDTCxtQkFBUyxBQUFDLENBQUMsTUFBSyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3JDLEFBQUksWUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLFdBQVUsQUFBQyxDQUFDLElBQUcsS0FBSyxDQUFDLENBQUM7QUFDakMsYUFBSSxJQUFHLFdBQWEsU0FBTyxDQUFHO0FBQzVCLHNCQUFVLEFBQUMsQ0FBQyxJQUFHLENBQUcsQ0FBQSxnRUFBK0QsRUFDL0UscUNBQW1DLENBQUMsQ0FBQztVQUN6QyxLQUFPO0FBQ0wsZUFBSSxDQUFDLElBQUcsb0JBQW9CLENBQUc7QUFDN0IsaUJBQUcsb0JBQW9CLEVBQUksQ0FBQSxJQUFHLElBQUksTUFBTSxDQUFDO1lBQzNDO0FBQUEsQUFDQSx1QkFBVyxBQUFDLENBQUMsSUFBRyxHQUFHLEtBQUssQ0FBRyxLQUFHLENBQUMsQ0FBQztVQUNsQztBQUFBLEFBQ0Esa0JBQVEsQUFBQyxFQUFDLENBQUM7UUFDYjtBQUFBLEFBQ0EsYUFBSztBQUFBLEFBQ1AsU0FBSyxnQkFBYztBQUNqQixZQUFNLElBQUksTUFBSSxBQUFDLENBQUMsaUJBQWdCLENBQUMsQ0FBQztBQUNsQyxhQUFLO0FBQUEsQUFDUCxTQUFLLGVBQWE7QUFDaEIsWUFBTSxJQUFJLE1BQUksQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7QUFDbEMsYUFBSztBQUFBLEFBQ1A7QUFDRSwwQkFBa0IsQUFBQyxDQUFDLHVCQUFzQixFQUFJLENBQUEsSUFBRyxLQUFLLENBQUMsQ0FBQztBQURuRCxJQUVUO0FBQ0EsU0FBTyxFQUNMLE1BQUssQ0FBRyxTQUFPLENBQ2pCLENBQUM7RUFDSDtBQUVBLEtBQUcsQ0FBSCxVQUFLLElBQUcsQ0FBRztBQUNULFFBQU0sSUFBSSxNQUFJLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQyxDQUFDO0VBQ3BDO0FBQUEsQUFFRixDQUFDLENBQUM7QUFDRiIsImZpbGUiOiJydWxlcy9WYXJpYWJsZURlY2xhcmF0b3IuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbkNvcHlyaWdodCAoYykgMjAxMy0yMDE0IEJyeWFuIEh1Z2hlcyA8YnJ5YW5AdGhlb3JldGljYWxpZGVhdGlvbnMuY29tPiAoaHR0cDovL3RoZW9yZXRpY2FsaWRlYXRpb25zLmNvbSlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHsgcmVnaXN0ZXJOb2RlUHJvY2Vzc29yLCBwcm9jZXNzTm9kZSB9IGZyb20gJy4uL25vZGUnO1xuaW1wb3J0IHsgYWRkTmFtZWRUeXBlLCBlbnRlclN0YXRlLCBleGl0U3RhdGUsIHN0YXRlcywgaGFuZGxlRXJyb3IsIGhhbmRsZUludGVybmFsRXJyb3IgfSBmcm9tICcuLi9zdGF0ZSc7XG5pbXBvcnQgeyBOdWxsVHlwZSB9IGZyb20gJy4uL3R5cGUnO1xuXG5yZWdpc3Rlck5vZGVQcm9jZXNzb3Ioe1xuXG4gIG5hbWU6ICdWYXJpYWJsZURlY2xhcmF0b3InLFxuXG4gIHBhcnNlU3RhdGVtZW50KG5vZGUpIHtcbiAgICAvLyBIYW5kbGUgbm9kZS5pZCBoZXJlLCBzaW5jZSBQYXR0ZXJucyBhcmVuJ3QgKnF1aXRlKiBmdWxsIHJ1bGVzXG4gICAgc3dpdGNoKG5vZGUuaWQudHlwZSkge1xuICAgICAgY2FzZSAnSWRlbnRpZmllcic6XG4gICAgICAgIGlmICghbm9kZS5pbml0KSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3Iobm9kZSwgJ1ZhcmlhYmxlIGRlY2xhcmF0aW9ucyBtdXN0IGhhdmUgYW4gaW5pdGlhbGl6ZXInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbnRlclN0YXRlKHN0YXRlcy5QQVJTSU5HX0VYUFJFU1NJT04pO1xuICAgICAgICAgIHZhciB0eXBlID0gcHJvY2Vzc05vZGUobm9kZS5pbml0KTtcbiAgICAgICAgICBpZiAodHlwZSBpbnN0YW5jZW9mIE51bGxUeXBlKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihub2RlLCAnQ2Fubm90IGluaXRpYWxpemUgdmFyaWFibGVzIHRvIFwibnVsbFwiIGJlY2F1c2UgaXQgaXMgYW1iaWd1b3VzLicgK1xuICAgICAgICAgICAgICAnIFRyeSBjYXN0aW5nIG51bGwgdG8gYSBuYW1lZCB0eXBlPycpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXR5cGUuZGVjbGFyYXRpb25Mb2NhdGlvbikge1xuICAgICAgICAgICAgICB0eXBlLmRlY2xhcmF0aW9uTG9jYXRpb24gPSBub2RlLmxvYy5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZE5hbWVkVHlwZShub2RlLmlkLm5hbWUsIHR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleGl0U3RhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ09iamVjdFBhdHRlcm4nOlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBJbXBsZW1lbnRlZCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0FycmF5UGF0dGVybic6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IEltcGxlbWVudGVkJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaGFuZGxlSW50ZXJuYWxFcnJvcignVW5rbm93biBwYXR0ZXJuIHR5cGUgJyArIG5vZGUudHlwZSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICByZXN1bHQ6ICdub3JtYWwnXG4gICAgfTtcbiAgfSxcblxuICBzY2FuKG5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBJbXBsZW1lbnRlZCcpO1xuICB9XG5cbn0pO1xuIiwiKCRfX3BsYWNlaG9sZGVyX18wID0gcmVxdWlyZSgkX19wbGFjZWhvbGRlcl9fMSksIFxuICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiAmJiAkX19wbGFjZWhvbGRlcl9fMy5fX2VzTW9kdWxlICYmICRfX3BsYWNlaG9sZGVyX180IHx8IHtkZWZhdWx0OiAkX19wbGFjZWhvbGRlcl9fNX0pIl19