"use strict";
var $___46__46__47_node__,
    $___46__46__47_type__,
    $___46__46__47_state__;
var registerNodeProcessor = ($___46__46__47_node__ = require("../node"), $___46__46__47_node__ && $___46__46__47_node__.__esModule && $___46__46__47_node__ || {default: $___46__46__47_node__}).registerNodeProcessor;
var $__1 = ($___46__46__47_type__ = require("../type"), $___46__46__47_type__ && $___46__46__47_type__.__esModule && $___46__46__47_type__ || {default: $___46__46__47_type__}),
    BooleanType = $__1.BooleanType,
    NumberType = $__1.NumberType,
    StringType = $__1.StringType,
    NullType = $__1.NullType,
    RegExpType = $__1.RegExpType;
var handleInternalError = ($___46__46__47_state__ = require("../state"), $___46__46__47_state__ && $___46__46__47_state__.__esModule && $___46__46__47_state__ || {default: $___46__46__47_state__}).handleInternalError;
registerNodeProcessor({
  name: 'Literal',
  parseExpression: function(node) {
    var valueType = typeof node.value;
    if (valueType == 'boolean') {
      return new BooleanType({node: node});
    } else if (valueType == 'number') {
      return new NumberType({node: node});
    } else if (valueType == 'string') {
      return new StringType({node: node});
    } else if (node.value === null) {
      return new NullType({node: node});
    } else if (node.value instanceof RegExp) {
      return new RegExpType({node: node});
    } else {
      handleInternalError('Unsupported literal type ' + (typeof node.value));
    }
  },
  scan: function(node) {},
  declare: function(node) {
    throw new Error('Not Implemented');
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL0xpdGVyYWwuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QkE7Ozs7RUFBUyxzQkFBb0IsRUN4QjdCLEVBQUMsdUJBQW9CLENBQUEsT0FBTSxBQUFDLFdBQWtCLENBQ3RDLENBQUEsd0JBQXFCLGlDQUEyQixDQUFBLHdCQUFxQixHQUFLLEVBQUMsT0FBTSx1QkFBbUIsQ0FEOUQsQUFDK0QsQ0FBQztTQUQ5RyxFQUFDLHVCQUFvQixDQUFBLE9BQU0sQUFBQyxXQUFrQixDQUN0QyxDQUFBLHdCQUFxQixpQ0FBMkIsQ0FBQSx3QkFBcUIsR0FBSyxFQUFDLE9BQU0sdUJBQW1CLENBRDlELEFBQytELENBQUM7QUR3QnJHLGNBQVU7QUFBRyxhQUFTO0FBQUcsYUFBUztBQUFHLFdBQU87QUFBRyxhQUFTO0VBQ3hELG9CQUFrQixFQzFCM0IsRUFBQyx3QkFBb0IsQ0FBQSxPQUFNLEFBQUMsWUFBa0IsQ0FDdEMsQ0FBQSx5QkFBcUIsa0NBQTJCLENBQUEseUJBQXFCLEdBQUssRUFBQyxPQUFNLHdCQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0FEMkI5RyxvQkFBb0IsQUFBQyxDQUFDO0FBRXBCLEtBQUcsQ0FBRyxVQUFRO0FBRWQsZ0JBQWMsQ0FBZCxVQUFnQixJQUFHLENBQUc7QUFDcEIsQUFBSSxNQUFBLENBQUEsU0FBUSxFQUFJLE9BQU8sS0FBRyxNQUFNLENBQUM7QUFDakMsT0FBSSxTQUFRLEdBQUssVUFBUSxDQUFHO0FBQzFCLFdBQU8sSUFBSSxZQUFVLEFBQUMsQ0FBQyxDQUNyQixJQUFHLENBQUcsS0FBRyxDQUNYLENBQUMsQ0FBQztJQUNKLEtBQU8sS0FBSSxTQUFRLEdBQUssU0FBTyxDQUFHO0FBQ2hDLFdBQU8sSUFBSSxXQUFTLEFBQUMsQ0FBQyxDQUNwQixJQUFHLENBQUcsS0FBRyxDQUNYLENBQUMsQ0FBQztJQUNKLEtBQU8sS0FBSSxTQUFRLEdBQUssU0FBTyxDQUFHO0FBQ2hDLFdBQU8sSUFBSSxXQUFTLEFBQUMsQ0FBQyxDQUNwQixJQUFHLENBQUcsS0FBRyxDQUNYLENBQUMsQ0FBQztJQUNKLEtBQU8sS0FBSSxJQUFHLE1BQU0sSUFBTSxLQUFHLENBQUc7QUFDOUIsV0FBTyxJQUFJLFNBQU8sQUFBQyxDQUFDLENBQ2xCLElBQUcsQ0FBRyxLQUFHLENBQ1gsQ0FBQyxDQUFDO0lBQ0osS0FBTyxLQUFJLElBQUcsTUFBTSxXQUFhLE9BQUssQ0FBRztBQUN2QyxXQUFPLElBQUksV0FBUyxBQUFDLENBQUMsQ0FDcEIsSUFBRyxDQUFHLEtBQUcsQ0FDWCxDQUFDLENBQUM7SUFDSixLQUFPO0FBQ0wsd0JBQWtCLEFBQUMsQ0FBQywyQkFBMEIsRUFBSSxFQUFDLE1BQU8sS0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3hFO0FBQUEsRUFDRjtBQUVBLEtBQUcsQ0FBSCxVQUFLLElBQUcsQ0FBRyxHQUVYO0FBRUEsUUFBTSxDQUFOLFVBQVEsSUFBRyxDQUFHO0FBQ1osUUFBTSxJQUFJLE1BQUksQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7RUFDcEM7QUFBQSxBQUVGLENBQUMsQ0FBQztBQUNGIiwiZmlsZSI6InJ1bGVzL0xpdGVyYWwuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbkNvcHlyaWdodCAoYykgMjAxMy0yMDE0IEJyeWFuIEh1Z2hlcyA8YnJ5YW5AdGhlb3JldGljYWxpZGVhdGlvbnMuY29tPiAoaHR0cDovL3RoZW9yZXRpY2FsaWRlYXRpb25zLmNvbSlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHsgcmVnaXN0ZXJOb2RlUHJvY2Vzc29yIH0gZnJvbSAnLi4vbm9kZSc7XG5pbXBvcnQgeyBCb29sZWFuVHlwZSwgTnVtYmVyVHlwZSwgU3RyaW5nVHlwZSwgTnVsbFR5cGUsIFJlZ0V4cFR5cGUgfSBmcm9tICcuLi90eXBlJztcbmltcG9ydCB7IGhhbmRsZUludGVybmFsRXJyb3IgfSBmcm9tICcuLi9zdGF0ZSc7XG5cbnJlZ2lzdGVyTm9kZVByb2Nlc3Nvcih7XG5cbiAgbmFtZTogJ0xpdGVyYWwnLFxuXG4gIHBhcnNlRXhwcmVzc2lvbihub2RlKSB7XG4gICAgdmFyIHZhbHVlVHlwZSA9IHR5cGVvZiBub2RlLnZhbHVlO1xuICAgIGlmICh2YWx1ZVR5cGUgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gbmV3IEJvb2xlYW5UeXBlKHtcbiAgICAgICAgbm9kZTogbm9kZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBuZXcgTnVtYmVyVHlwZSh7XG4gICAgICAgIG5vZGU6IG5vZGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodmFsdWVUeXBlID09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbmV3IFN0cmluZ1R5cGUoe1xuICAgICAgICBub2RlOiBub2RlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG5vZGUudmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgTnVsbFR5cGUoe1xuICAgICAgICBub2RlOiBub2RlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG5vZGUudmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwVHlwZSh7XG4gICAgICAgIG5vZGU6IG5vZGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVJbnRlcm5hbEVycm9yKCdVbnN1cHBvcnRlZCBsaXRlcmFsIHR5cGUgJyArICh0eXBlb2Ygbm9kZS52YWx1ZSkpO1xuICAgIH1cbiAgfSxcblxuICBzY2FuKG5vZGUpIHtcbiAgICAvLyBEbyBub3RoaW5nXG4gIH0sXG5cbiAgZGVjbGFyZShub2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgSW1wbGVtZW50ZWQnKTtcbiAgfVxuXG59KTtcbiIsIigkX19wbGFjZWhvbGRlcl9fMCA9IHJlcXVpcmUoJF9fcGxhY2Vob2xkZXJfXzEpLCBcbiAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzIgJiYgJF9fcGxhY2Vob2xkZXJfXzMuX19lc01vZHVsZSAmJiAkX19wbGFjZWhvbGRlcl9fNCB8fCB7ZGVmYXVsdDogJF9fcGxhY2Vob2xkZXJfXzV9KSJdfQ==