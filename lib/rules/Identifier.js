"use strict";
var $___46__46__47_node__,
    $___46__46__47_state__,
    $___46__46__47_type__;
var registerNodeProcessor = ($___46__46__47_node__ = require("../node"), $___46__46__47_node__ && $___46__46__47_node__.__esModule && $___46__46__47_node__ || {default: $___46__46__47_node__}).registerNodeProcessor;
var $__1 = ($___46__46__47_state__ = require("../state"), $___46__46__47_state__ && $___46__46__47_state__.__esModule && $___46__46__47_state__ || {default: $___46__46__47_state__}),
    lookupNamedType = $__1.lookupNamedType,
    handleError = $__1.handleError;
var $__2 = ($___46__46__47_type__ = require("../type"), $___46__46__47_type__ && $___46__46__47_type__.__esModule && $___46__46__47_type__ || {default: $___46__46__47_type__}),
    NumberType = $__2.NumberType,
    InvalidType = $__2.InvalidType;
registerNodeProcessor({
  name: 'Identifier',
  parseExpression: function(node) {
    if (node.name == 'undefined') {
      handleError(node, 'Undefined values are not allowed');
      return new InvalidType({node: node});
    }
    if (node.name == 'NaN' || node.name == 'Infinity') {
      return new NumberType({
        node: node,
        declarationLocation: node.loc.start
      });
    }
    var type = lookupNamedType(node.name);
    if (!type) {
      handleError(node, '"' + node.name + '" is not defined');
      return new InvalidType({node: node});
    }
    return type;
  },
  scan: function(node) {},
  declare: function(node) {
    throw new Error('Not Implemented');
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL0lkZW50aWZpZXIuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QkE7Ozs7RUFBUyxzQkFBb0IsRUN4QjdCLEVBQUMsdUJBQW9CLENBQUEsT0FBTSxBQUFDLFdBQWtCLENBQ3RDLENBQUEsd0JBQXFCLGlDQUEyQixDQUFBLHdCQUFxQixHQUFLLEVBQUMsT0FBTSx1QkFBbUIsQ0FEOUQsQUFDK0QsQ0FBQztTQUQ5RyxFQUFDLHdCQUFvQixDQUFBLE9BQU0sQUFBQyxZQUFrQixDQUN0QyxDQUFBLHlCQUFxQixrQ0FBMkIsQ0FBQSx5QkFBcUIsR0FBSyxFQUFDLE9BQU0sd0JBQW1CLENBRDlELEFBQytELENBQUM7QUR3QnJHLGtCQUFjO0FBQUcsY0FBVTtTQ3pCcEMsRUFBQyx1QkFBb0IsQ0FBQSxPQUFNLEFBQUMsV0FBa0IsQ0FDdEMsQ0FBQSx3QkFBcUIsaUNBQTJCLENBQUEsd0JBQXFCLEdBQUssRUFBQyxPQUFNLHVCQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0FEeUJyRyxhQUFTO0FBQUcsY0FBVTtBQUUvQixvQkFBb0IsQUFBQyxDQUFDO0FBRXBCLEtBQUcsQ0FBRyxhQUFXO0FBRWpCLGdCQUFjLENBQWQsVUFBZ0IsSUFBRyxDQUFHO0FBQ3BCLE9BQUksSUFBRyxLQUFLLEdBQUssWUFBVSxDQUFHO0FBQzVCLGdCQUFVLEFBQUMsQ0FBQyxJQUFHLENBQUcsbUNBQWlDLENBQUMsQ0FBQztBQUNyRCxXQUFPLElBQUksWUFBVSxBQUFDLENBQUMsQ0FDckIsSUFBRyxDQUFHLEtBQUcsQ0FDWCxDQUFDLENBQUM7SUFDSjtBQUFBLEFBQ0EsT0FBSSxJQUFHLEtBQUssR0FBSyxNQUFJLENBQUEsRUFBSyxDQUFBLElBQUcsS0FBSyxHQUFLLFdBQVMsQ0FBRztBQUNqRCxXQUFPLElBQUksV0FBUyxBQUFDLENBQUM7QUFDcEIsV0FBRyxDQUFHLEtBQUc7QUFDVCwwQkFBa0IsQ0FBRyxDQUFBLElBQUcsSUFBSSxNQUFNO0FBQUEsTUFDcEMsQ0FBQyxDQUFDO0lBQ0o7QUFBQSxBQUNJLE1BQUEsQ0FBQSxJQUFHLEVBQUksQ0FBQSxlQUFjLEFBQUMsQ0FBQyxJQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLE9BQUksQ0FBQyxJQUFHLENBQUc7QUFDVCxnQkFBVSxBQUFDLENBQUMsSUFBRyxDQUFHLENBQUEsR0FBRSxFQUFJLENBQUEsSUFBRyxLQUFLLENBQUEsQ0FBSSxtQkFBaUIsQ0FBQyxDQUFDO0FBQ3ZELFdBQU8sSUFBSSxZQUFVLEFBQUMsQ0FBQyxDQUNyQixJQUFHLENBQUcsS0FBRyxDQUNYLENBQUMsQ0FBQztJQUNKO0FBQUEsQUFDQSxTQUFPLEtBQUcsQ0FBQztFQUNiO0FBRUEsS0FBRyxDQUFILFVBQUssSUFBRyxDQUFHLEdBRVg7QUFFQSxRQUFNLENBQU4sVUFBUSxJQUFHLENBQUc7QUFDWixRQUFNLElBQUksTUFBSSxBQUFDLENBQUMsaUJBQWdCLENBQUMsQ0FBQztFQUNwQztBQUFBLEFBRUYsQ0FBQyxDQUFDO0FBQ0YiLCJmaWxlIjoicnVsZXMvSWRlbnRpZmllci5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSAyMDEzLTIwMTQgQnJ5YW4gSHVnaGVzIDxicnlhbkB0aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20+IChodHRwOi8vdGhlb3JldGljYWxpZGVhdGlvbnMuY29tKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgeyByZWdpc3Rlck5vZGVQcm9jZXNzb3IgfSBmcm9tICcuLi9ub2RlJztcbmltcG9ydCB7IGxvb2t1cE5hbWVkVHlwZSwgaGFuZGxlRXJyb3IgfSBmcm9tICcuLi9zdGF0ZSc7XG5pbXBvcnQgeyBOdW1iZXJUeXBlLCBJbnZhbGlkVHlwZSB9IGZyb20gJy4uL3R5cGUnO1xuXG5yZWdpc3Rlck5vZGVQcm9jZXNzb3Ioe1xuXG4gIG5hbWU6ICdJZGVudGlmaWVyJyxcblxuICBwYXJzZUV4cHJlc3Npb24obm9kZSkge1xuICAgIGlmIChub2RlLm5hbWUgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGhhbmRsZUVycm9yKG5vZGUsICdVbmRlZmluZWQgdmFsdWVzIGFyZSBub3QgYWxsb3dlZCcpO1xuICAgICAgcmV0dXJuIG5ldyBJbnZhbGlkVHlwZSh7XG4gICAgICAgIG5vZGU6IG5vZGVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobm9kZS5uYW1lID09ICdOYU4nIHx8IG5vZGUubmFtZSA9PSAnSW5maW5pdHknKSB7XG4gICAgICByZXR1cm4gbmV3IE51bWJlclR5cGUoe1xuICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICBkZWNsYXJhdGlvbkxvY2F0aW9uOiBub2RlLmxvYy5zdGFydFxuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciB0eXBlID0gbG9va3VwTmFtZWRUeXBlKG5vZGUubmFtZSk7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICBoYW5kbGVFcnJvcihub2RlLCAnXCInICsgbm9kZS5uYW1lICsgJ1wiIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgICByZXR1cm4gbmV3IEludmFsaWRUeXBlKHtcbiAgICAgICAgbm9kZTogbm9kZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0eXBlO1xuICB9LFxuXG4gIHNjYW4obm9kZSkge1xuICAgIC8vIERvIG5vdGhpbmdcbiAgfSxcblxuICBkZWNsYXJlKG5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBJbXBsZW1lbnRlZCcpO1xuICB9XG5cbn0pO1xuIiwiKCRfX3BsYWNlaG9sZGVyX18wID0gcmVxdWlyZSgkX19wbGFjZWhvbGRlcl9fMSksIFxuICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiAmJiAkX19wbGFjZWhvbGRlcl9fMy5fX2VzTW9kdWxlICYmICRfX3BsYWNlaG9sZGVyX180IHx8IHtkZWZhdWx0OiAkX19wbGFjZWhvbGRlcl9fNX0pIl19