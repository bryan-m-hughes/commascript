"use strict";
Object.defineProperties(exports, {
  BooleanType: {get: function() {
      return BooleanType;
    }},
  NumberType: {get: function() {
      return NumberType;
    }},
  StringType: {get: function() {
      return StringType;
    }},
  ObjectType: {get: function() {
      return ObjectType;
    }},
  RegExpType: {get: function() {
      return RegExpType;
    }},
  NullType: {get: function() {
      return NullType;
    }},
  ArrayType: {get: function() {
      return ArrayType;
    }},
  FunctionType: {get: function() {
      return FunctionType;
    }},
  ConstructorType: {get: function() {
      return ConstructorType;
    }},
  isBoolean: {get: function() {
      return isBoolean;
    }},
  isNumber: {get: function() {
      return isNumber;
    }},
  isString: {get: function() {
      return isString;
    }},
  isPrimitive: {get: function() {
      return isPrimitive;
    }},
  isObject: {get: function() {
      return isObject;
    }},
  isRegExp: {get: function() {
      return isRegExp;
    }},
  isNull: {get: function() {
      return isNull;
    }},
  isArray: {get: function() {
      return isArray;
    }},
  isFunction: {get: function() {
      return isFunction;
    }},
  isConstructor: {get: function() {
      return isConstructor;
    }},
  compareTypes: {get: function() {
      return compareTypes;
    }},
  __esModule: {value: true}
});
var $__state__;
var $__0 = ($__state__ = require("./state"), $__state__ && $__state__.__esModule && $__state__ || {default: $__state__}),
    handleError = $__0.handleError,
    handleInternalError = $__0.handleInternalError;
var Type = function Type(options) {
  this.name = options.name;
  this.declarationLocation = options.declarationLocation;
};
($traceurRuntime.createClass)(Type, {}, {});
var BooleanType = function BooleanType() {
  $traceurRuntime.superCall(this, $BooleanType.prototype, "constructor", [{name: 'boolean'}]);
};
var $BooleanType = BooleanType;
($traceurRuntime.createClass)(BooleanType, {}, {}, Type);
var NumberType = function NumberType() {
  $traceurRuntime.superCall(this, $NumberType.prototype, "constructor", [{name: 'number'}]);
};
var $NumberType = NumberType;
($traceurRuntime.createClass)(NumberType, {}, {}, Type);
var StringType = function StringType() {
  $traceurRuntime.superCall(this, $StringType.prototype, "constructor", [{name: 'string'}]);
};
var $StringType = StringType;
($traceurRuntime.createClass)(StringType, {}, {}, Type);
var ObjectType = function ObjectType(options) {
  options = options || {};
  $traceurRuntime.superCall(this, $ObjectType.prototype, "constructor", [options.name || 'anonymous object']);
  this.properties = options.properties || {};
  this.proto = options.proto || null;
};
var $ObjectType = ObjectType;
($traceurRuntime.createClass)(ObjectType, {}, {}, Type);
var RegExpType = function RegExpType() {
  $traceurRuntime.superCall(this, $RegExpType.prototype, "constructor", [{name: 'regexp'}]);
};
var $RegExpType = RegExpType;
($traceurRuntime.createClass)(RegExpType, {}, {}, Type);
var NullType = function NullType() {
  $traceurRuntime.superCall(this, $NullType.prototype, "constructor", [{name: 'null'}]);
};
var $NullType = NullType;
($traceurRuntime.createClass)(NullType, {}, {}, Type);
var ArrayType = function ArrayType() {
  if (!options || !options.elementType) {
    handleInternalError('Invalid options passed to ArrayType constructor.');
  }
  $traceurRuntime.superCall(this, $ArrayType.prototype, "constructor", [options.name || 'anonymous array']);
  this.elementType = options.elementType;
};
var $ArrayType = ArrayType;
($traceurRuntime.createClass)(ArrayType, {}, {}, Type);
var FunctionType = function FunctionType(options) {
  if (!options || !options.node) {
    handleInternalError('Invalid options passed to FunctionType constructor.');
  }
  $traceurRuntime.superCall(this, $FunctionType.prototype, "constructor", [options.name || 'anonymous function']);
  this.node = options.node;
  this.argumentTypes = options.arguments || [];
  this.returnType = options.returnType || null;
};
var $FunctionType = FunctionType;
($traceurRuntime.createClass)(FunctionType, {applyPattern: function(options) {
    if (!options || !options.argumentTypes || !options.returnType) {
      handleInternalError('Invalid options passed to FunctionType constructor.');
    }
  }}, {}, Type);
var ConstructorType = function ConstructorType(options) {
  if (!options || !options.name || !options.instantiatedType) {
    handleInternalError('Invalid options passed to ConstructorType constructor.');
  }
  $traceurRuntime.superCall(this, $ConstructorType.prototype, "constructor", [options.name]);
  this.argumentTypes = options.argumentTypes || [];
  this.instantiatedType = options.instantiatedType;
};
var $ConstructorType = ConstructorType;
($traceurRuntime.createClass)(ConstructorType, {}, {}, Type);
function isBoolean(type) {
  return type instanceof BooleanType;
}
function isNumber(type) {
  return type instanceof NumberType;
}
function isString(type) {
  return type instanceof StringType;
}
function isPrimitive(type) {
  return isBoolean(type) || isNumber(type) || isString(type);
}
function isObject(type) {
  return type instanceof ObjectType;
}
function isRegExp(type) {
  return type instanceof RegExpType;
}
function isNull(type) {
  return type instanceof NullType;
}
function isArray(type) {
  return type instanceof ArrayType;
}
function isFunction(type) {
  return type instanceof FunctionType;
}
function isConstructor(type) {
  return type instanceof ConstructorType;
}
function compareTypes(type1, type2, options) {
  if (!options || !options.node) {
    handleInternalError('Invalid options passed to compareTypes.');
  }
  if (type1 == type2) {
    return true;
  }
  function handleCompareError(errorMessage) {
    handleError(options.node, 'Cannot cast "' + type1.name + '" (declared at ' + type1.declarationLocation + ') as "' + type2.name + '" (declared at ' + type2.declarationLocation + ')' + (errorMessage ? ': ' + errorMessage : ''));
  }
  if (isPrimitive(type1) && isPrimitive(type2)) {
    if ((isBoolean(type1) && isBoolean(type2)) || (isNumber(type1) && isNumber(type2)) || (isString(type1) && isString(type2))) {
      return true;
    } else {
      handleCompareError();
      return false;
    }
  }
  var p;
  if (isObject(type1) && isObject(type2)) {
    if (!compareTypes(type1.proto, type2.proto, options)) {
      return false;
    }
    if (Object.keys(type1.properties).length != Object.keys(type2.properties).length) {
      handleCompareError('Objects do not contain the same number of properties');
      return false;
    }
    for (p in type1.properties) {
      if (!type2.properties[p]) {
        handleCompareError('Object type is missing property "' + p + '"');
        return false;
      }
      if (!compareTypes(type1.properties[p], type2.properties[p], options)) {
        handleCompareError('Property "' + p + '" type mismatch');
        return false;
      }
    }
    return true;
  }
  var i;
  if (isFunction(type1) && isFunction(type2)) {
    if (!compareTypes(type1.returnType, type2.returnType, options)) {
      return false;
    }
    if (type1.argumentTypes.length != type2.argumentTypes.length) {
      handleCompareError('Functions do not contain the same number of arguments');
      return false;
    }
    for (i = 0; i < type1.argumentTypes.length; i++) {
      if (!compareTypes(type1.argumentTypes[i], type2.argumentTypes[i], options)) {
        handleCompareError('Argument "' + i + '" type mismatch');
        return false;
      }
    }
    return true;
  }
  if (isConstructor(type1) && isConstructor(type2)) {
    if (!compareTypes(type1.instantiatedType, type2.instantiatedType, options)) {
      return false;
    }
    if (type1.argumentTypes.length != type2.argumentTypes.length) {
      handleCompareError('Constructors do not contain the same number of arguments');
      return false;
    }
    for (i = 0; i < type1.argumentTypes.length; i++) {
      if (!compareTypes(type1.argumentTypes[i], type2.argumentTypes[i], options)) {
        handleCompareError('Argument "' + i + '" type mismatch');
        return false;
      }
    }
    return true;
  }
  return false;
}

//# sourceMappingURL=data:application/json;base64,