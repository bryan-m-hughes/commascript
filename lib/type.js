"use strict";
Object.defineProperties(exports, {
  BooleanType: {get: function() {
      return BooleanType;
    }},
  NumberType: {get: function() {
      return NumberType;
    }},
  StringType: {get: function() {
      return StringType;
    }},
  ObjectType: {get: function() {
      return ObjectType;
    }},
  ArrayType: {get: function() {
      return ArrayType;
    }},
  FunctionType: {get: function() {
      return FunctionType;
    }},
  ConstructorType: {get: function() {
      return ConstructorType;
    }},
  isBoolean: {get: function() {
      return isBoolean;
    }},
  isNumber: {get: function() {
      return isNumber;
    }},
  isString: {get: function() {
      return isString;
    }},
  isPrimitive: {get: function() {
      return isPrimitive;
    }},
  isObject: {get: function() {
      return isObject;
    }},
  isArray: {get: function() {
      return isArray;
    }},
  isFunction: {get: function() {
      return isFunction;
    }},
  isConstructor: {get: function() {
      return isConstructor;
    }},
  compareTypes: {get: function() {
      return compareTypes;
    }},
  __esModule: {value: true}
});
var $__state__;
var state = ($__state__ = require("./state"), $__state__ && $__state__.__esModule && $__state__ || {default: $__state__}).default;
var Type = function Type(options) {
  this.name = options.name;
  this.declarationLocation = options.declarationLocation;
};
($traceurRuntime.createClass)(Type, {}, {});
var BooleanType = function BooleanType() {
  $traceurRuntime.superCall(this, $BooleanType.prototype, "constructor", [{name: 'boolean'}]);
};
var $BooleanType = BooleanType;
($traceurRuntime.createClass)(BooleanType, {}, {}, Type);
var NumberType = function NumberType() {
  $traceurRuntime.superCall(this, $NumberType.prototype, "constructor", [{name: 'number'}]);
};
var $NumberType = NumberType;
($traceurRuntime.createClass)(NumberType, {}, {}, Type);
var StringType = function StringType() {
  $traceurRuntime.superCall(this, $StringType.prototype, "constructor", [{name: 'string'}]);
};
var $StringType = StringType;
($traceurRuntime.createClass)(StringType, {}, {}, Type);
var ObjectType = function ObjectType(options) {
  options = options || {};
  $traceurRuntime.superCall(this, $ObjectType.prototype, "constructor", [options.name || 'anonymous object']);
  this.properties = options.properties || {};
  this.proto = options.proto || null;
};
var $ObjectType = ObjectType;
($traceurRuntime.createClass)(ObjectType, {}, {}, Type);
var ArrayType = function ArrayType() {
  if (!options || !options.elementType) {
    state.handleInternalError('Invalid options passed to ArrayType constructor.');
  }
  $traceurRuntime.superCall(this, $ArrayType.prototype, "constructor", [options.name || 'anonymous array']);
  this.elementType = options.elementType;
};
var $ArrayType = ArrayType;
($traceurRuntime.createClass)(ArrayType, {}, {}, Type);
var FunctionType = function FunctionType(options) {
  if (!options || !options.node) {
    state.handleInternalError('Invalid options passed to FunctionType constructor.');
  }
  $traceurRuntime.superCall(this, $FunctionType.prototype, "constructor", [options.name || 'anonymous function']);
  this.node = options.node;
  this.argumentTypes = options.arguments || [];
  this.returnType = options.returnType || null;
};
var $FunctionType = FunctionType;
($traceurRuntime.createClass)(FunctionType, {applyPattern: function(options) {
    if (!options || !options.argumentTypes || !options.returnType) {
      state.handleInternalError('Invalid options passed to FunctionType constructor.');
    }
  }}, {}, Type);
var ConstructorType = function ConstructorType(options) {
  if (!options || !options.name || !options.instantiatedType) {
    state.handleInternalError('Invalid options passed to ConstructorType constructor.');
  }
  $traceurRuntime.superCall(this, $ConstructorType.prototype, "constructor", [options.name]);
  this.argumentTypes = options.argumentTypes || [];
  this.instantiatedType = options.instantiatedType;
};
var $ConstructorType = ConstructorType;
($traceurRuntime.createClass)(ConstructorType, {}, {}, Type);
function isBoolean(type) {
  return type instanceof BooleanType;
}
function isNumber(type) {
  return type instanceof NumberType;
}
function isString(type) {
  return type instanceof StringType;
}
function isPrimitive(type) {
  return isBoolean(type) || isNumber(type) || isString(type);
}
function isObject(type) {
  return type instanceof ObjectType;
}
function isArray(type) {
  return type instanceof ArrayType;
}
function isFunction(type) {
  return type instanceof FunctionType;
}
function isConstructor(type) {
  return type instanceof ConstructorType;
}
function compareTypes(type1, type2, options) {
  if (!options || !options.node) {
    state.handleInternalError('Invalid options passed to compareTypes.');
  }
  if (type1 == type2) {
    return true;
  }
  function handleError(errorMessage) {
    state.handleError(options.node, 'Cannot cast "' + type1.name + '" (declared at ' + type1.declarationLocation + ') as "' + type2.name + '" (declared at ' + type2.declarationLocation + ')' + (errorMessage ? ': ' + errorMessage : ''));
  }
  if (isPrimitive(type1) && isPrimitive(type2)) {
    if ((isBoolean(type1) && isBoolean(type2)) || (isNumber(type1) && isNumber(type2)) || (isString(type1) && isString(type2))) {
      return true;
    } else {
      handleError();
      return false;
    }
  }
  var p;
  if (isObject(type1) && isObject(type2)) {
    if (!compareTypes(type1.proto, type2.proto, options)) {
      return false;
    }
    if (Object.keys(type1.properties).length != Object.keys(type2.properties).length) {
      handleError('Objects do not contain the same number of properties');
      return false;
    }
    for (p in type1.properties) {
      if (!type2.properties[p]) {
        handleError('Object type is missing property "' + p + '"');
        return false;
      }
      if (!compareTypes(type1.properties[p], type2.properties[p], options)) {
        handleError('Property "' + p + '" type mismatch');
        return false;
      }
    }
    return true;
  }
  var i;
  if (isFunction(type1) && isFunction(type2)) {
    if (!compareTypes(type1.returnType, type2.returnType, options)) {
      return false;
    }
    if (type1.argumentTypes.length != type2.argumentTypes.length) {
      handleError('Functions do not contain the same number of arguments');
      return false;
    }
    for (i = 0; i < type1.argumentTypes.length; i++) {
      if (!compareTypes(type1.argumentTypes[i], type2.argumentTypes[i], options)) {
        handleError('Argument "' + i + '" type mismatch');
        return false;
      }
    }
    return true;
  }
  if (isConstructor(type1) && isConstructor(type2)) {
    if (!compareTypes(type1.instantiatedType, type2.instantiatedType, options)) {
      return false;
    }
    if (type1.argumentTypes.length != type2.argumentTypes.length) {
      handleError('Constructors do not contain the same number of arguments');
      return false;
    }
    for (i = 0; i < type1.argumentTypes.length; i++) {
      if (!compareTypes(type1.argumentTypes[i], type2.argumentTypes[i], options)) {
        handleError('Argument "' + i + '" type mismatch');
        return false;
      }
    }
    return true;
  }
  return false;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGUuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci80IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci81IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci84IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzkiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMTEiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0JBO0FDeEJBLEtBQUssaUJBQWlCLEFBQUMsQ0FBQyxPQUFNO2FDQTlCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLHdCQUF3QjtJQUFFLEFEQTlCLENBQUM7WUFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsdUJBQXdCO0lBQUUsQURBOUIsQ0FBQztZQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSx1QkFBd0I7SUFBRSxBREE5QixDQUFDO1lBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLHVCQUF3QjtJQUFFLEFEQTlCLENBQUM7V0FBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsc0JBQXdCO0lBQUUsQURBOUIsQ0FBQztjQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSx5QkFBd0I7SUFBRSxBREE5QixDQUFDO2lCQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSw0QkFBd0I7SUFBRSxBREE5QixDQUFDO1dBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLHNCQUF3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RSxrQkFBVSxBQUFDLENBQUMsWUFBVyxFQUFJLEVBQUEsQ0FBQSxDQUFJLGtCQUFnQixDQUFDLENBQUM7QUFDakQsYUFBTyxNQUFJLENBQUM7TUFDZDtBQUFBLElBQ0Y7QUFBQSxBQUNBLFNBQU8sS0FBRyxDQUFDO0VBQ2I7QUFBQSxBQUVBLEtBQUksYUFBWSxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUEsRUFBSyxDQUFBLGFBQVksQUFBQyxDQUFDLEtBQUksQ0FBQyxDQUFHO0FBQ2hELE9BQUksQ0FBQyxZQUFXLEFBQUMsQ0FBQyxLQUFJLGlCQUFpQixDQUFHLENBQUEsS0FBSSxpQkFBaUIsQ0FBRyxRQUFNLENBQUMsQ0FBRztBQUMxRSxXQUFPLE1BQUksQ0FBQztJQUNkO0FBQUEsQUFDQSxPQUFJLEtBQUksY0FBYyxPQUFPLEdBQUssQ0FBQSxLQUFJLGNBQWMsT0FBTyxDQUFHO0FBQzVELGdCQUFVLEFBQUMsQ0FBQywwREFBeUQsQ0FBQyxDQUFDO0FBQ3ZFLFdBQU8sTUFBSSxDQUFDO0lBQ2Q7QUFBQSxBQUNBLFFBQUssQ0FBQSxFQUFJLEVBQUEsQ0FBRyxDQUFBLENBQUEsRUFBSSxDQUFBLEtBQUksY0FBYyxPQUFPLENBQUcsQ0FBQSxDQUFBLEVBQUUsQ0FBRztBQUMvQyxTQUFJLENBQUMsWUFBVyxBQUFDLENBQUMsS0FBSSxjQUFjLENBQUUsQ0FBQSxDQUFDLENBQUcsQ0FBQSxLQUFJLGNBQWMsQ0FBRSxDQUFBLENBQUMsQ0FBRyxRQUFNLENBQUMsQ0FBRztBQUMxRSxrQkFBVSxBQUFDLENBQUMsWUFBVyxFQUFJLEVBQUEsQ0FBQSxDQUFJLGtCQUFnQixDQUFDLENBQUM7QUFDakQsYUFBTyxNQUFJLENBQUM7TUFDZDtBQUFBLElBQ0Y7QUFBQSxBQUNBLFNBQU8sS0FBRyxDQUFDO0VBQ2I7QUFBQSxBQUVBLE9BQU8sTUFBSSxDQUFDO0FBQ2Q7QUFBQSIsImZpbGUiOiJ0eXBlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG5Db3B5cmlnaHQgKGMpIDIwMTMtMjAxNCBCcnlhbiBIdWdoZXMgPGJyeWFuQHRoZW9yZXRpY2FsaWRlYXRpb25zLmNvbT4gKGh0dHA6Ly90aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20pXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBzdGF0ZSBmcm9tICcuL3N0YXRlJztcblxuY2xhc3MgVHlwZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWU7XG4gICAgdGhpcy5kZWNsYXJhdGlvbkxvY2F0aW9uID0gb3B0aW9ucy5kZWNsYXJhdGlvbkxvY2F0aW9uO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCb29sZWFuVHlwZSBleHRlbmRzIFR5cGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7IG5hbWU6ICdib29sZWFuJyB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTnVtYmVyVHlwZSBleHRlbmRzIFR5cGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7IG5hbWU6ICdudW1iZXInIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdHJpbmdUeXBlIGV4dGVuZHMgVHlwZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHsgbmFtZTogJ3N0cmluZycgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE9iamVjdFR5cGUgZXh0ZW5kcyBUeXBlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHN1cGVyKG9wdGlvbnMubmFtZSB8fCAnYW5vbnltb3VzIG9iamVjdCcpO1xuICAgIHRoaXMucHJvcGVydGllcyA9IG9wdGlvbnMucHJvcGVydGllcyB8fCB7fTtcbiAgICB0aGlzLnByb3RvID0gb3B0aW9ucy5wcm90byB8fCBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBcnJheVR5cGUgZXh0ZW5kcyBUeXBlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLmVsZW1lbnRUeXBlKSB7XG4gICAgc3RhdGUuaGFuZGxlSW50ZXJuYWxFcnJvcignSW52YWxpZCBvcHRpb25zIHBhc3NlZCB0byBBcnJheVR5cGUgY29uc3RydWN0b3IuJyk7XG4gIH1cbiAgc3VwZXIob3B0aW9ucy5uYW1lIHx8ICdhbm9ueW1vdXMgYXJyYXknKTtcbiAgdGhpcy5lbGVtZW50VHlwZSA9IG9wdGlvbnMuZWxlbWVudFR5cGU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uVHlwZSBleHRlbmRzIFR5cGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLm5vZGUpIHtcbiAgICAgIHN0YXRlLmhhbmRsZUludGVybmFsRXJyb3IoJ0ludmFsaWQgb3B0aW9ucyBwYXNzZWQgdG8gRnVuY3Rpb25UeXBlIGNvbnN0cnVjdG9yLicpO1xuICAgIH1cbiAgICBzdXBlcihvcHRpb25zLm5hbWUgfHwgJ2Fub255bW91cyBmdW5jdGlvbicpO1xuICAgIHRoaXMubm9kZSA9IG9wdGlvbnMubm9kZTtcbiAgICB0aGlzLmFyZ3VtZW50VHlwZXMgPSBvcHRpb25zLmFyZ3VtZW50cyB8fCBbXTtcbiAgICB0aGlzLnJldHVyblR5cGUgPSBvcHRpb25zLnJldHVyblR5cGUgfHwgbnVsbDtcbiAgfVxuICBhcHBseVBhdHRlcm4ob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5hcmd1bWVudFR5cGVzIHx8ICFvcHRpb25zLnJldHVyblR5cGUpIHtcbiAgICAgIHN0YXRlLmhhbmRsZUludGVybmFsRXJyb3IoJ0ludmFsaWQgb3B0aW9ucyBwYXNzZWQgdG8gRnVuY3Rpb25UeXBlIGNvbnN0cnVjdG9yLicpO1xuICAgIH1cbiAgICAvLyBUT0RPOiBUaGlzIGlzIGNhbGxlZCBieSBjYWxsIGV4cHJlc3Npb25zIHRvIHNvbGlkaWZ5IHR5cGVzLiBBbmFsYXl6ZXMgZnVuY3Rpb24gYXQgdGhpcyBwb2ludCBpbiB0aW1lLlxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zdHJ1Y3RvclR5cGUgZXh0ZW5kcyBUeXBlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5uYW1lIHx8ICFvcHRpb25zLmluc3RhbnRpYXRlZFR5cGUpIHtcbiAgICAgIHN0YXRlLmhhbmRsZUludGVybmFsRXJyb3IoJ0ludmFsaWQgb3B0aW9ucyBwYXNzZWQgdG8gQ29uc3RydWN0b3JUeXBlIGNvbnN0cnVjdG9yLicpO1xuICAgIH1cbiAgICBzdXBlcihvcHRpb25zLm5hbWUpO1xuICAgIHRoaXMuYXJndW1lbnRUeXBlcyA9IG9wdGlvbnMuYXJndW1lbnRUeXBlcyB8fCBbXTtcbiAgICB0aGlzLmluc3RhbnRpYXRlZFR5cGUgPSBvcHRpb25zLmluc3RhbnRpYXRlZFR5cGU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQm9vbGVhbih0eXBlKSB7XG4gIHJldHVybiB0eXBlIGluc3RhbmNlb2YgQm9vbGVhblR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih0eXBlKSB7XG4gIHJldHVybiB0eXBlIGluc3RhbmNlb2YgTnVtYmVyVHlwZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUgaW5zdGFuY2VvZiBTdHJpbmdUeXBlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcmltaXRpdmUodHlwZSkge1xuICByZXR1cm4gaXNCb29sZWFuKHR5cGUpIHx8IGlzTnVtYmVyKHR5cGUpIHx8IGlzU3RyaW5nKHR5cGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodHlwZSkge1xuICByZXR1cm4gdHlwZSBpbnN0YW5jZW9mIE9iamVjdFR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5KHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUgaW5zdGFuY2VvZiBBcnJheVR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUgaW5zdGFuY2VvZiBGdW5jdGlvblR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvclR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlVHlwZXModHlwZTEsIHR5cGUyLCBvcHRpb25zKSB7XG5cbiAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLm5vZGUpIHtcbiAgICBzdGF0ZS5oYW5kbGVJbnRlcm5hbEVycm9yKCdJbnZhbGlkIG9wdGlvbnMgcGFzc2VkIHRvIGNvbXBhcmVUeXBlcy4nKTtcbiAgfVxuICBpZiAodHlwZTEgPT0gdHlwZTIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yTWVzc2FnZSkge1xuICAgIHN0YXRlLmhhbmRsZUVycm9yKG9wdGlvbnMubm9kZSwgJ0Nhbm5vdCBjYXN0IFwiJyArIHR5cGUxLm5hbWUgKyAnXCIgKGRlY2xhcmVkIGF0ICcgKyB0eXBlMS5kZWNsYXJhdGlvbkxvY2F0aW9uICtcbiAgICAgICcpIGFzIFwiJyArIHR5cGUyLm5hbWUgKyAnXCIgKGRlY2xhcmVkIGF0ICcgKyB0eXBlMi5kZWNsYXJhdGlvbkxvY2F0aW9uICsgJyknICtcbiAgICAgIChlcnJvck1lc3NhZ2UgPyAnOiAnICsgZXJyb3JNZXNzYWdlIDogJycpKTtcbiAgfVxuXG4gIGlmIChpc1ByaW1pdGl2ZSh0eXBlMSkgJiYgaXNQcmltaXRpdmUodHlwZTIpKSB7XG4gICAgaWYgKChpc0Jvb2xlYW4odHlwZTEpICYmIGlzQm9vbGVhbih0eXBlMikpIHx8XG4gICAgICAoaXNOdW1iZXIodHlwZTEpICYmIGlzTnVtYmVyKHR5cGUyKSkgfHxcbiAgICAgIChpc1N0cmluZyh0eXBlMSkgJiYgaXNTdHJpbmcodHlwZTIpKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZUVycm9yKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdmFyIHA7XG4gIGlmIChpc09iamVjdCh0eXBlMSkgJiYgaXNPYmplY3QodHlwZTIpKSB7XG4gICAgaWYgKCFjb21wYXJlVHlwZXModHlwZTEucHJvdG8sIHR5cGUyLnByb3RvLCBvcHRpb25zKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXModHlwZTEucHJvcGVydGllcykubGVuZ3RoICE9IE9iamVjdC5rZXlzKHR5cGUyLnByb3BlcnRpZXMpLmxlbmd0aCkge1xuICAgICAgaGFuZGxlRXJyb3IoJ09iamVjdHMgZG8gbm90IGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChwIGluIHR5cGUxLnByb3BlcnRpZXMpIHtcbiAgICAgIGlmICghdHlwZTIucHJvcGVydGllc1twXSkge1xuICAgICAgICBoYW5kbGVFcnJvcignT2JqZWN0IHR5cGUgaXMgbWlzc2luZyBwcm9wZXJ0eSBcIicgKyBwICsgJ1wiJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghY29tcGFyZVR5cGVzKHR5cGUxLnByb3BlcnRpZXNbcF0sIHR5cGUyLnByb3BlcnRpZXNbcF0sIG9wdGlvbnMpKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKCdQcm9wZXJ0eSBcIicgKyBwICsgJ1wiIHR5cGUgbWlzbWF0Y2gnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIFRPRE86IE5lZWQgdG8gcmV0aGluayBpbiB0ZXJtcyBvZiBwYXJ0aWFsIGRlZmluaXRpb25zXG4gIHZhciBpO1xuICBpZiAoaXNGdW5jdGlvbih0eXBlMSkgJiYgaXNGdW5jdGlvbih0eXBlMikpIHtcbiAgICBpZiAoIWNvbXBhcmVUeXBlcyh0eXBlMS5yZXR1cm5UeXBlLCB0eXBlMi5yZXR1cm5UeXBlLCBvcHRpb25zKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZTEuYXJndW1lbnRUeXBlcy5sZW5ndGggIT0gdHlwZTIuYXJndW1lbnRUeXBlcy5sZW5ndGgpIHtcbiAgICAgIGhhbmRsZUVycm9yKCdGdW5jdGlvbnMgZG8gbm90IGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIGFyZ3VtZW50cycpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgdHlwZTEuYXJndW1lbnRUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFjb21wYXJlVHlwZXModHlwZTEuYXJndW1lbnRUeXBlc1tpXSwgdHlwZTIuYXJndW1lbnRUeXBlc1tpXSwgb3B0aW9ucykpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoJ0FyZ3VtZW50IFwiJyArIGkgKyAnXCIgdHlwZSBtaXNtYXRjaCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzQ29uc3RydWN0b3IodHlwZTEpICYmIGlzQ29uc3RydWN0b3IodHlwZTIpKSB7XG4gICAgaWYgKCFjb21wYXJlVHlwZXModHlwZTEuaW5zdGFudGlhdGVkVHlwZSwgdHlwZTIuaW5zdGFudGlhdGVkVHlwZSwgb3B0aW9ucykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGUxLmFyZ3VtZW50VHlwZXMubGVuZ3RoICE9IHR5cGUyLmFyZ3VtZW50VHlwZXMubGVuZ3RoKSB7XG4gICAgICBoYW5kbGVFcnJvcignQ29uc3RydWN0b3JzIGRvIG5vdCBjb250YWluIHRoZSBzYW1lIG51bWJlciBvZiBhcmd1bWVudHMnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IHR5cGUxLmFyZ3VtZW50VHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghY29tcGFyZVR5cGVzKHR5cGUxLmFyZ3VtZW50VHlwZXNbaV0sIHR5cGUyLmFyZ3VtZW50VHlwZXNbaV0sIG9wdGlvbnMpKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKCdBcmd1bWVudCBcIicgKyBpICsgJ1wiIHR5cGUgbWlzbWF0Y2gnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGV4cG9ydHMsICRfX3BsYWNlaG9sZGVyX18wKTsiLCJ7Z2V0OiAkX19wbGFjZWhvbGRlcl9fMH0iLCJnZXQgJF9fcGxhY2Vob2xkZXJfXzAoKSB7IHJldHVybiAkX19wbGFjZWhvbGRlcl9fMTsgfSIsIl9fZXNNb2R1bGU6IHRydWUiLCJ7dmFsdWU6ICRfX3BsYWNlaG9sZGVyX18wfSIsIigkX19wbGFjZWhvbGRlcl9fMCA9IHJlcXVpcmUoJF9fcGxhY2Vob2xkZXJfXzEpLCBcbiAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzIgJiYgJF9fcGxhY2Vob2xkZXJfXzMuX19lc01vZHVsZSAmJiAkX19wbGFjZWhvbGRlcl9fNCB8fCB7ZGVmYXVsdDogJF9fcGxhY2Vob2xkZXJfXzV9KSIsInZhciAkX19wbGFjZWhvbGRlcl9fMCA9ICRfX3BsYWNlaG9sZGVyX18xIiwiKCR0cmFjZXVyUnVudGltZS5jcmVhdGVDbGFzcykoJF9fcGxhY2Vob2xkZXJfXzAsICRfX3BsYWNlaG9sZGVyX18xLCAkX19wbGFjZWhvbGRlcl9fMikiLCIkdHJhY2V1clJ1bnRpbWUuc3VwZXJDYWxsKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX18zKSIsInZhciAkX19wbGFjZWhvbGRlcl9fMCA9ICRfX3BsYWNlaG9sZGVyX18xIiwiKCR0cmFjZXVyUnVudGltZS5jcmVhdGVDbGFzcykoJF9fcGxhY2Vob2xkZXJfXzAsICRfX3BsYWNlaG9sZGVyX18xLCAkX19wbGFjZWhvbGRlcl9fMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX18zKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==