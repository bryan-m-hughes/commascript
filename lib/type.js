"use strict";
Object.defineProperties(exports, {
  BooleanType: {get: function() {
      return BooleanType;
    }},
  NumberType: {get: function() {
      return NumberType;
    }},
  StringType: {get: function() {
      return StringType;
    }},
  RegExpType: {get: function() {
      return RegExpType;
    }},
  NullType: {get: function() {
      return NullType;
    }},
  ObjectType: {get: function() {
      return ObjectType;
    }},
  ArrayType: {get: function() {
      return ArrayType;
    }},
  FunctionType: {get: function() {
      return FunctionType;
    }},
  ConstructorType: {get: function() {
      return ConstructorType;
    }},
  InvalidType: {get: function() {
      return InvalidType;
    }},
  isPrimitive: {get: function() {
      return isPrimitive;
    }},
  compareTypes: {get: function() {
      return compareTypes;
    }},
  __esModule: {value: true}
});
var $__state__;
var $__0 = ($__state__ = require("./state"), $__state__ && $__state__.__esModule && $__state__ || {default: $__state__}),
    handleError = $__0.handleError,
    handleInternalError = $__0.handleInternalError,
    getRelativeCurrentFile = $__0.getRelativeCurrentFile;
var Type = function Type(options) {
  this.name = options.name;
  this.node = options.node;
  this.declarationLocation = options.declarationLocation;
};
($traceurRuntime.createClass)(Type, {}, {});
var BooleanType = function BooleanType(options) {
  options.name = 'boolean';
  $traceurRuntime.superCall(this, $BooleanType.prototype, "constructor", [options]);
};
var $BooleanType = BooleanType;
($traceurRuntime.createClass)(BooleanType, {}, {}, Type);
var NumberType = function NumberType(options) {
  options.name = 'number';
  $traceurRuntime.superCall(this, $NumberType.prototype, "constructor", [options]);
};
var $NumberType = NumberType;
($traceurRuntime.createClass)(NumberType, {}, {}, Type);
var StringType = function StringType(options) {
  options.name = 'string';
  $traceurRuntime.superCall(this, $StringType.prototype, "constructor", [options]);
};
var $StringType = StringType;
($traceurRuntime.createClass)(StringType, {}, {}, Type);
var RegExpType = function RegExpType(options) {
  options.name = 'regexp';
  $traceurRuntime.superCall(this, $RegExpType.prototype, "constructor", [options]);
};
var $RegExpType = RegExpType;
($traceurRuntime.createClass)(RegExpType, {}, {}, Type);
var NullType = function NullType(options) {
  options.name = 'null';
  $traceurRuntime.superCall(this, $NullType.prototype, "constructor", [options]);
};
var $NullType = NullType;
($traceurRuntime.createClass)(NullType, {}, {}, Type);
var ObjectType = function ObjectType(options) {
  options.name = options.name || 'anonymous object';
  $traceurRuntime.superCall(this, $ObjectType.prototype, "constructor", [options]);
  this.properties = options.properties || {};
  this.proto = options.proto || null;
};
var $ObjectType = ObjectType;
($traceurRuntime.createClass)(ObjectType, {}, {}, Type);
var ArrayType = function ArrayType(options) {
  options.name = options.name || 'anonymous array';
  $traceurRuntime.superCall(this, $ArrayType.prototype, "constructor", [options]);
  if (!options || !options.elementType) {
    handleInternalError('Invalid options passed to ArrayType constructor.');
  }
  this.elementType = options.elementType;
};
var $ArrayType = ArrayType;
($traceurRuntime.createClass)(ArrayType, {}, {}, Type);
var FunctionType = function FunctionType(options) {
  options.name = options.name || 'anonymous function';
  $traceurRuntime.superCall(this, $FunctionType.prototype, "constructor", [options]);
  this.argumentTypes = options.arguments || [];
  this.returnType = options.returnType || null;
};
var $FunctionType = FunctionType;
($traceurRuntime.createClass)(FunctionType, {
  applyCall: function(options) {
    throw new Error('Not Implemented');
  },
  applyCast: function(options) {
    throw new Error('Not Implemented');
  }
}, {}, Type);
var ConstructorType = function ConstructorType(options) {
  if (!options || !options.name || !options.instantiatedType) {
    handleInternalError('Invalid options passed to ConstructorType constructor.');
  }
  $traceurRuntime.superCall(this, $ConstructorType.prototype, "constructor", [options.name]);
  this.argumentTypes = options.argumentTypes || [];
  this.instantiatedType = options.instantiatedType;
};
var $ConstructorType = ConstructorType;
($traceurRuntime.createClass)(ConstructorType, {}, {}, Type);
var InvalidType = function InvalidType(options) {
  options.name = 'Invalid Type';
  $traceurRuntime.superCall(this, $InvalidType.prototype, "constructor", [options]);
};
var $InvalidType = InvalidType;
($traceurRuntime.createClass)(InvalidType, {}, {}, Type);
function isPrimitive(type) {
  return type instanceof BooleanType || type instanceof NumberType || type instanceof StringType;
}
function compareTypes(type1, type2, options) {
  if (!options || !options.node) {
    handleInternalError('Invalid options passed to compareTypes.');
  }
  if (type1 == type2) {
    return true;
  }
  function handleCompareError(errorMessage) {
    handleError(options.node, 'Cannot cast "' + type1.name + '" as "' + type2.name + '"' + (errorMessage ? ': ' + errorMessage : ''));
  }
  if (isPrimitive(type1) && isPrimitive(type2)) {
    if ((type1 instanceof BooleanType && type2 instanceof BooleanType) || (type1 instanceof NumberType && type2 instanceof NumberType) || (type1 instanceof StringType && type2 instanceof StringType)) {
      return true;
    } else {
      handleCompareError();
      return false;
    }
  }
  var p;
  if (type1 instanceof ObjectType && type2 instanceof ObjectType) {
    if (!compareTypes(type1.proto, type2.proto, options)) {
      return false;
    }
    if (Object.keys(type1.properties).length != Object.keys(type2.properties).length) {
      handleCompareError('Objects do not contain the same number of properties');
      return false;
    }
    for (p in type1.properties) {
      if (!type2.properties[p]) {
        handleCompareError('Object type is missing property "' + p + '"');
        return false;
      }
      if (!compareTypes(type1.properties[p], type2.properties[p], options)) {
        handleCompareError('Property "' + p + '" type mismatch');
        return false;
      }
    }
    return true;
  }
  var i;
  if (type1 instanceof FunctionType && type2 instanceof FunctionType) {
    if (!compareTypes(type1.returnType, type2.returnType, options)) {
      return false;
    }
    if (type1.argumentTypes.length != type2.argumentTypes.length) {
      handleCompareError('Functions do not contain the same number of arguments');
      return false;
    }
    for (i = 0; i < type1.argumentTypes.length; i++) {
      if (!compareTypes(type1.argumentTypes[i], type2.argumentTypes[i], options)) {
        handleCompareError('Argument "' + i + '" type mismatch');
        return false;
      }
    }
    return true;
  }
  if (type1 instanceof ConstructorType && type2 instanceof ConstructorType) {
    if (!compareTypes(type1.instantiatedType, type2.instantiatedType, options)) {
      return false;
    }
    if (type1.argumentTypes.length != type2.argumentTypes.length) {
      handleCompareError('Constructors do not contain the same number of arguments');
      return false;
    }
    for (i = 0; i < type1.argumentTypes.length; i++) {
      if (!compareTypes(type1.argumentTypes[i], type2.argumentTypes[i], options)) {
        handleCompareError('Argument "' + i + '" type mismatch');
        return false;
      }
    }
    return true;
  }
  return false;
}

//# sourceMappingURL=data:application/json;base64,