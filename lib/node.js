"use strict";
var state = require('./state');
var processors = {};
module.exports = {
  isCommaScriptDirective: isCommaScriptDirective,
  registerNodeProcessor: registerNodeProcessor,
  processNode: processNode,
  processBlock: processBlock,
  processProgram: processProgram
};
function isCommaScriptDirective(node) {
  return node.type == 'ExpressionStatement' && node.expression.type == 'Literal' && node.expression.value == 'use commascript';
}
function registerNodeProcessor(name, processor) {
  processor[name] = processor;
}
function processNode(node) {
  var processor = processors[node.type];
  if (!processor) {
    state.handleInternalError('No processor for rule type ' + node.type);
  }
  return processor.process(node);
}
function processBlock(nodes) {
  if (nodes) {
    for (var i = 0,
        len = nodes.length; i < len; i++) {
      var result = nodes[i].analyze();
      if (result.result == 'return' || result.result == 'throw' || result.result == 'break' || result.result == 'continue') {
        return result;
      }
    }
  }
  return {result: 'normal'};
}
function processProgram(node) {
  var processor = processors[node.type];
  if (!processor) {
    state.handleInternalError('No processor for rule type ' + node.type);
  }
  processor.walk(node);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0JBO0FBQUEsQUFBSSxFQUFBLENBQUEsS0FBSSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsU0FBUSxDQUFDLENBQUM7QUFDOUIsQUFBSSxFQUFBLENBQUEsVUFBUyxFQUFJLEdBQUMsQ0FBQztBQUVuQixLQUFLLFFBQVEsRUFBSTtBQUNmLHVCQUFxQixDQUFHLHVCQUFxQjtBQUM3QyxzQkFBb0IsQ0FBRyxzQkFBb0I7QUFDM0MsWUFBVSxDQUFHLFlBQVU7QUFDdkIsYUFBVyxDQUFHLGFBQVc7QUFDekIsZUFBYSxDQUFHLGVBQWE7QUFBQSxBQUMvQixDQUFDO0FBRUQsT0FBUyx1QkFBcUIsQ0FBRSxJQUFHLENBQUc7QUFDcEMsT0FBTyxDQUFBLElBQUcsS0FBSyxHQUFLLHNCQUFvQixDQUFBLEVBQ3RDLENBQUEsSUFBRyxXQUFXLEtBQUssR0FBSyxVQUFRLENBQUEsRUFDaEMsQ0FBQSxJQUFHLFdBQVcsTUFBTSxHQUFLLGtCQUFnQixDQUFDO0FBQzlDO0FBQUEsQUFFQSxPQUFTLHNCQUFvQixDQUFFLElBQUcsQ0FBRyxDQUFBLFNBQVEsQ0FBRztBQUM5QyxVQUFRLENBQUUsSUFBRyxDQUFDLEVBQUksVUFBUSxDQUFDO0FBQzdCO0FBQUEsQUFFQSxPQUFTLFlBQVUsQ0FBRSxJQUFHLENBQUc7QUFDekIsQUFBSSxJQUFBLENBQUEsU0FBUSxFQUFJLENBQUEsVUFBUyxDQUFFLElBQUcsS0FBSyxDQUFDLENBQUM7QUFDckMsS0FBSSxDQUFDLFNBQVEsQ0FBRztBQUNkLFFBQUksb0JBQW9CLEFBQUMsQ0FBQyw2QkFBNEIsRUFBSSxDQUFBLElBQUcsS0FBSyxDQUFDLENBQUM7RUFDdEU7QUFBQSxBQUNBLE9BQU8sQ0FBQSxTQUFRLFFBQVEsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0FBQ2hDO0FBQUEsQUFFQSxPQUFTLGFBQVcsQ0FBRSxLQUFJLENBQUc7QUFDM0IsS0FBSSxLQUFJLENBQUc7QUFDVCxRQUFTLEdBQUEsQ0FBQSxDQUFBLEVBQUksRUFBQTtBQUFHLFVBQUUsRUFBSSxDQUFBLEtBQUksT0FBTyxDQUFHLENBQUEsQ0FBQSxFQUFJLElBQUUsQ0FBRyxDQUFBLENBQUEsRUFBRSxDQUFHO0FBQ2hELEFBQUksUUFBQSxDQUFBLE1BQUssRUFBSSxDQUFBLEtBQUksQ0FBRSxDQUFBLENBQUMsUUFBUSxBQUFDLEVBQUMsQ0FBQztBQUMvQixTQUFJLE1BQUssT0FBTyxHQUFLLFNBQU8sQ0FBQSxFQUFLLENBQUEsTUFBSyxPQUFPLEdBQUssUUFBTSxDQUFBLEVBQUssQ0FBQSxNQUFLLE9BQU8sR0FBSyxRQUFNLENBQUEsRUFBSyxDQUFBLE1BQUssT0FBTyxHQUFLLFdBQVMsQ0FBRztBQUNwSCxhQUFPLE9BQUssQ0FBQztNQUNmO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxBQUNBLE9BQU8sRUFDTCxNQUFLLENBQUcsU0FBTyxDQUNqQixDQUFDO0FBQ0g7QUFBQSxBQUVBLE9BQVMsZUFBYSxDQUFFLElBQUcsQ0FBRztBQUM1QixBQUFJLElBQUEsQ0FBQSxTQUFRLEVBQUksQ0FBQSxVQUFTLENBQUUsSUFBRyxLQUFLLENBQUMsQ0FBQztBQUNyQyxLQUFJLENBQUMsU0FBUSxDQUFHO0FBQ2QsUUFBSSxvQkFBb0IsQUFBQyxDQUFDLDZCQUE0QixFQUFJLENBQUEsSUFBRyxLQUFLLENBQUMsQ0FBQztFQUN0RTtBQUFBLEFBQ0EsVUFBUSxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUN0QjtBQUFBIiwiZmlsZSI6Im5vZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbkNvcHlyaWdodCAoYykgMjAxMy0yMDE0IEJyeWFuIEh1Z2hlcyA8YnJ5YW5AdGhlb3JldGljYWxpZGVhdGlvbnMuY29tPiAoaHR0cDovL3RoZW9yZXRpY2FsaWRlYXRpb25zLmNvbSlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuKi9cblxudmFyIHN0YXRlID0gcmVxdWlyZSgnLi9zdGF0ZScpO1xudmFyIHByb2Nlc3NvcnMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQ29tbWFTY3JpcHREaXJlY3RpdmU6IGlzQ29tbWFTY3JpcHREaXJlY3RpdmUsXG4gIHJlZ2lzdGVyTm9kZVByb2Nlc3NvcjogcmVnaXN0ZXJOb2RlUHJvY2Vzc29yLFxuICBwcm9jZXNzTm9kZTogcHJvY2Vzc05vZGUsXG4gIHByb2Nlc3NCbG9jazogcHJvY2Vzc0Jsb2NrLFxuICBwcm9jZXNzUHJvZ3JhbTogcHJvY2Vzc1Byb2dyYW0sXG59O1xuXG5mdW5jdGlvbiBpc0NvbW1hU2NyaXB0RGlyZWN0aXZlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudHlwZSA9PSAnRXhwcmVzc2lvblN0YXRlbWVudCcgJiZcbiAgICBub2RlLmV4cHJlc3Npb24udHlwZSA9PSAnTGl0ZXJhbCcgJiZcbiAgICBub2RlLmV4cHJlc3Npb24udmFsdWUgPT0gJ3VzZSBjb21tYXNjcmlwdCc7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTm9kZVByb2Nlc3NvcihuYW1lLCBwcm9jZXNzb3IpIHtcbiAgcHJvY2Vzc29yW25hbWVdID0gcHJvY2Vzc29yO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzTm9kZShub2RlKSB7XG4gIHZhciBwcm9jZXNzb3IgPSBwcm9jZXNzb3JzW25vZGUudHlwZV07XG4gIGlmICghcHJvY2Vzc29yKSB7XG4gICAgc3RhdGUuaGFuZGxlSW50ZXJuYWxFcnJvcignTm8gcHJvY2Vzc29yIGZvciBydWxlIHR5cGUgJyArIG5vZGUudHlwZSk7XG4gIH1cbiAgcmV0dXJuIHByb2Nlc3Nvci5wcm9jZXNzKG5vZGUpO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzQmxvY2sobm9kZXMpIHtcbiAgaWYgKG5vZGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbm9kZXNbaV0uYW5hbHl6ZSgpO1xuICAgICAgaWYgKHJlc3VsdC5yZXN1bHQgPT0gJ3JldHVybicgfHwgcmVzdWx0LnJlc3VsdCA9PSAndGhyb3cnIHx8IHJlc3VsdC5yZXN1bHQgPT0gJ2JyZWFrJyB8fCByZXN1bHQucmVzdWx0ID09ICdjb250aW51ZScpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByZXN1bHQ6ICdub3JtYWwnXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NQcm9ncmFtKG5vZGUpIHtcbiAgdmFyIHByb2Nlc3NvciA9IHByb2Nlc3NvcnNbbm9kZS50eXBlXTtcbiAgaWYgKCFwcm9jZXNzb3IpIHtcbiAgICBzdGF0ZS5oYW5kbGVJbnRlcm5hbEVycm9yKCdObyBwcm9jZXNzb3IgZm9yIHJ1bGUgdHlwZSAnICsgbm9kZS50eXBlKTtcbiAgfVxuICBwcm9jZXNzb3Iud2Fsayhub2RlKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==