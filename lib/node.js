"use strict";
Object.defineProperties(exports, {
  isCommaScriptDirective: {get: function() {
      return isCommaScriptDirective;
    }},
  registerNodeProcessor: {get: function() {
      return registerNodeProcessor;
    }},
  processNode: {get: function() {
      return processNode;
    }},
  processBlock: {get: function() {
      return processBlock;
    }},
  processProgram: {get: function() {
      return processProgram;
    }},
  __esModule: {value: true}
});
var $__state__;
var handleInternalError = ($__state__ = require("./state"), $__state__ && $__state__.__esModule && $__state__ || {default: $__state__}).handleInternalError;
var processors = {};
function isCommaScriptDirective(node) {
  return node.type == 'ExpressionStatement' && node.expression.type == 'Literal' && node.expression.value == 'use commascript';
}
function registerNodeProcessor(processor) {
  processors[processor.name] = processor;
}
function processNode(node) {
  var processor = processors[node.type];
  if (!processor) {
    handleInternalError('No processor for rule type ' + node.type);
  }
  return processor.process(node);
}
function processBlock(nodes) {
  if (nodes) {
    for (var i = 0,
        len = nodes.length; i < len; i++) {
      var result = nodes[i].analyze();
      if (result.result == 'return' || result.result == 'throw' || result.result == 'break' || result.result == 'continue') {
        return result;
      }
    }
  }
  return {result: 'normal'};
}
function processProgram(node) {
  var processor = processors[node.type];
  if (!processor) {
    handleInternalError('No processor for rule type ' + node.type);
  }
  processor.walk(node);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGUuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci80IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci81IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0JBO0FDeEJBLEtBQUssaUJBQWlCLEFBQUMsQ0FBQyxPQUFNO3dCQ0E5QixFQUFDLEdBQUUsWUNBcUI7QUFBRSxtQ0FBd0I7SUFBRSxBREE5QixDQUFDO3VCQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSxrQ0FBd0I7SUFBRSxBREE5QixDQUFDO2FBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLHdCQUF3QjtJQUFFLEFEQTlCLENBQUM7Y0FBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUseUJBQXdCO0lBQUUsQURBOUIsQ0FBQztnQkFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsMkJBQXdCO0lBQUUsQURBOUIsQ0FBQztBRUF2QixXQUFTLENDQVQsRUFBQyxLQUFJLENEQU8sS0FBRyxBQ0FTLENBQUM7Q0pBeUIsQ0FBQzs7RUR3QjFDLG9CQUFrQixFTXhCM0IsRUFBQyxZQUFvQixDQUFBLE9BQU0sQUFBQyxXQUFrQixDQUN0QyxDQUFBLGFBQXFCLHNCQUEyQixDQUFBLGFBQXFCLEdBQUssRUFBQyxPQUFNLFlBQW1CLENBRDlELEFBQytELENBQUM7QU55QjlHLEFBQUksRUFBQSxDQUFBLFVBQVMsRUFBSSxHQUFDLENBQUM7QUFFWixPQUFTLHVCQUFxQixDQUFFLElBQUcsQ0FBRztBQUMzQyxPQUFPLENBQUEsSUFBRyxLQUFLLEdBQUssc0JBQW9CLENBQUEsRUFDdEMsQ0FBQSxJQUFHLFdBQVcsS0FBSyxHQUFLLFVBQVEsQ0FBQSxFQUNoQyxDQUFBLElBQUcsV0FBVyxNQUFNLEdBQUssa0JBQWdCLENBQUM7QUFDOUM7QUFBQSxBQUVPLE9BQVMsc0JBQW9CLENBQUUsU0FBUSxDQUFHO0FBQy9DLFdBQVMsQ0FBRSxTQUFRLEtBQUssQ0FBQyxFQUFJLFVBQVEsQ0FBQztBQUN4QztBQUFBLEFBRU8sT0FBUyxZQUFVLENBQUUsSUFBRyxDQUFHO0FBQ2hDLEFBQUksSUFBQSxDQUFBLFNBQVEsRUFBSSxDQUFBLFVBQVMsQ0FBRSxJQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLEtBQUksQ0FBQyxTQUFRLENBQUc7QUFDZCxzQkFBa0IsQUFBQyxDQUFDLDZCQUE0QixFQUFJLENBQUEsSUFBRyxLQUFLLENBQUMsQ0FBQztFQUNoRTtBQUFBLEFBQ0EsT0FBTyxDQUFBLFNBQVEsUUFBUSxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7QUFDaEM7QUFBQSxBQUVPLE9BQVMsYUFBVyxDQUFFLEtBQUksQ0FBRztBQUNsQyxLQUFJLEtBQUksQ0FBRztBQUNULFFBQVMsR0FBQSxDQUFBLENBQUEsRUFBSSxFQUFBO0FBQUcsVUFBRSxFQUFJLENBQUEsS0FBSSxPQUFPLENBQUcsQ0FBQSxDQUFBLEVBQUksSUFBRSxDQUFHLENBQUEsQ0FBQSxFQUFFLENBQUc7QUFDaEQsQUFBSSxRQUFBLENBQUEsTUFBSyxFQUFJLENBQUEsS0FBSSxDQUFFLENBQUEsQ0FBQyxRQUFRLEFBQUMsRUFBQyxDQUFDO0FBQy9CLFNBQUksTUFBSyxPQUFPLEdBQUssU0FBTyxDQUFBLEVBQUssQ0FBQSxNQUFLLE9BQU8sR0FBSyxRQUFNLENBQUEsRUFBSyxDQUFBLE1BQUssT0FBTyxHQUFLLFFBQU0sQ0FBQSxFQUFLLENBQUEsTUFBSyxPQUFPLEdBQUssV0FBUyxDQUFHO0FBQ3BILGFBQU8sT0FBSyxDQUFDO01BQ2Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEFBQ0EsT0FBTyxFQUNMLE1BQUssQ0FBRyxTQUFPLENBQ2pCLENBQUM7QUFDSDtBQUFBLEFBRU8sT0FBUyxlQUFhLENBQUUsSUFBRyxDQUFHO0FBQ25DLEFBQUksSUFBQSxDQUFBLFNBQVEsRUFBSSxDQUFBLFVBQVMsQ0FBRSxJQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLEtBQUksQ0FBQyxTQUFRLENBQUc7QUFDZCxzQkFBa0IsQUFBQyxDQUFDLDZCQUE0QixFQUFJLENBQUEsSUFBRyxLQUFLLENBQUMsQ0FBQztFQUNoRTtBQUFBLEFBQ0EsVUFBUSxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUN0QjtBQUFBIiwiZmlsZSI6Im5vZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbkNvcHlyaWdodCAoYykgMjAxMy0yMDE0IEJyeWFuIEh1Z2hlcyA8YnJ5YW5AdGhlb3JldGljYWxpZGVhdGlvbnMuY29tPiAoaHR0cDovL3RoZW9yZXRpY2FsaWRlYXRpb25zLmNvbSlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHsgaGFuZGxlSW50ZXJuYWxFcnJvciB9IGZyb20gJy4vc3RhdGUnO1xuXG52YXIgcHJvY2Vzc29ycyA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21tYVNjcmlwdERpcmVjdGl2ZShub2RlKSB7XG4gIHJldHVybiBub2RlLnR5cGUgPT0gJ0V4cHJlc3Npb25TdGF0ZW1lbnQnICYmXG4gICAgbm9kZS5leHByZXNzaW9uLnR5cGUgPT0gJ0xpdGVyYWwnICYmXG4gICAgbm9kZS5leHByZXNzaW9uLnZhbHVlID09ICd1c2UgY29tbWFzY3JpcHQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJOb2RlUHJvY2Vzc29yKHByb2Nlc3Nvcikge1xuICBwcm9jZXNzb3JzW3Byb2Nlc3Nvci5uYW1lXSA9IHByb2Nlc3Nvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NOb2RlKG5vZGUpIHtcbiAgdmFyIHByb2Nlc3NvciA9IHByb2Nlc3NvcnNbbm9kZS50eXBlXTtcbiAgaWYgKCFwcm9jZXNzb3IpIHtcbiAgICBoYW5kbGVJbnRlcm5hbEVycm9yKCdObyBwcm9jZXNzb3IgZm9yIHJ1bGUgdHlwZSAnICsgbm9kZS50eXBlKTtcbiAgfVxuICByZXR1cm4gcHJvY2Vzc29yLnByb2Nlc3Mobm9kZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzQmxvY2sobm9kZXMpIHtcbiAgaWYgKG5vZGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbm9kZXNbaV0uYW5hbHl6ZSgpO1xuICAgICAgaWYgKHJlc3VsdC5yZXN1bHQgPT0gJ3JldHVybicgfHwgcmVzdWx0LnJlc3VsdCA9PSAndGhyb3cnIHx8IHJlc3VsdC5yZXN1bHQgPT0gJ2JyZWFrJyB8fCByZXN1bHQucmVzdWx0ID09ICdjb250aW51ZScpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByZXN1bHQ6ICdub3JtYWwnXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzUHJvZ3JhbShub2RlKSB7XG4gIHZhciBwcm9jZXNzb3IgPSBwcm9jZXNzb3JzW25vZGUudHlwZV07XG4gIGlmICghcHJvY2Vzc29yKSB7XG4gICAgaGFuZGxlSW50ZXJuYWxFcnJvcignTm8gcHJvY2Vzc29yIGZvciBydWxlIHR5cGUgJyArIG5vZGUudHlwZSk7XG4gIH1cbiAgcHJvY2Vzc29yLndhbGsobm9kZSk7XG59XG4iLCJPYmplY3QuZGVmaW5lUHJvcGVydGllcyhleHBvcnRzLCAkX19wbGFjZWhvbGRlcl9fMCk7Iiwie2dldDogJF9fcGxhY2Vob2xkZXJfXzB9IiwiZ2V0ICRfX3BsYWNlaG9sZGVyX18wKCkgeyByZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzE7IH0iLCJfX2VzTW9kdWxlOiB0cnVlIiwie3ZhbHVlOiAkX19wbGFjZWhvbGRlcl9fMH0iLCIoJF9fcGxhY2Vob2xkZXJfXzAgPSByZXF1aXJlKCRfX3BsYWNlaG9sZGVyX18xKSwgXG4gICAgICAgICRfX3BsYWNlaG9sZGVyX18yICYmICRfX3BsYWNlaG9sZGVyX18zLl9fZXNNb2R1bGUgJiYgJF9fcGxhY2Vob2xkZXJfXzQgfHwge2RlZmF1bHQ6ICRfX3BsYWNlaG9sZGVyX181fSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=