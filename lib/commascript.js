"use strict";
Object.defineProperties(exports, {
  validate: {get: function() {
      return validate;
    }},
  __esModule: {value: true}
});
var $__fs__,
    $__path__,
    $__wrench__,
    $__esprima__,
    $__state__,
    $__node__;
var fs = ($__fs__ = require("fs"), $__fs__ && $__fs__.__esModule && $__fs__ || {default: $__fs__}).default;
var path = ($__path__ = require("path"), $__path__ && $__path__.__esModule && $__path__ || {default: $__path__}).default;
var wrench = ($__wrench__ = require("wrench"), $__wrench__ && $__wrench__.__esModule && $__wrench__ || {default: $__wrench__}).default;
var esprima = ($__esprima__ = require("esprima"), $__esprima__ && $__esprima__.__esModule && $__esprima__ || {default: $__esprima__}).default;
var setCurrentFile = ($__state__ = require("./state"), $__state__ && $__state__.__esModule && $__state__ || {default: $__state__}).setCurrentFile;
var processProgram = ($__node__ = require("./node"), $__node__ && $__node__.__esModule && $__node__ || {default: $__node__}).processProgram;
wrench.readdirSyncRecursive(path.join(__dirname, 'rules')).forEach(function(file) {
  if (/\.js$/.test(file)) {
    require(path.join(__dirname, 'rules', file));
  }
});
function validate(files, logger) {
  for (var i = 0,
      len = files.length; i < len; i++) {
    validateFile(files[i], logger);
  }
}
function validateFile(file, logger) {
  var source;
  try {
    source = fs.readFileSync(file).toString();
  } catch (e) {
    logger.error('Could not read file "' + file + '": ' + e);
    process.exit(1);
  }
  var ast;
  try {
    ast = esprima.parse(source, {loc: true});
  } catch (e) {
    logger.error(e.message + ' ' + file + ':' + e.lineNumber + ':' + e.col);
    process.exit(1);
  }
  setCurrentFile(file);
  debugger;
  processProgram(ast);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1hc2NyaXB0LmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdCQTtBQ3hCQSxLQUFLLGlCQUFpQixBQUFDLENBQUMsT0FBTTtVQ0E5QixFQUFDLEdBQUUsWUNBcUI7QUFBRSxxQkFBd0I7SUFBRSxBREE5QixDQUFDO0FFQXZCLFdBQVMsQ0NBVCxFQUFDLEtBQUksQ0RBTyxLQUFHLEFDQVMsQ0FBQztDSkF5QixDQUFDOzs7Ozs7O0VEd0I1QyxHQUFDLEVNeEJSLEVBQUMsU0FBb0IsQ0FBQSxPQUFNLEFBQUMsTUFBa0IsQ0FDdEMsQ0FBQSxVQUFxQixtQkFBMkIsQ0FBQSxVQUFxQixHQUFLLEVBQUMsT0FBTSxTQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOd0J2RyxLQUFHLEVNekJWLEVBQUMsV0FBb0IsQ0FBQSxPQUFNLEFBQUMsUUFBa0IsQ0FDdEMsQ0FBQSxZQUFxQixxQkFBMkIsQ0FBQSxZQUFxQixHQUFLLEVBQUMsT0FBTSxXQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOeUJ2RyxPQUFLLEVNMUJaLEVBQUMsYUFBb0IsQ0FBQSxPQUFNLEFBQUMsVUFBa0IsQ0FDdEMsQ0FBQSxjQUFxQix1QkFBMkIsQ0FBQSxjQUFxQixHQUFLLEVBQUMsT0FBTSxhQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOMEJ2RyxRQUFNLEVNM0JiLEVBQUMsY0FBb0IsQ0FBQSxPQUFNLEFBQUMsV0FBa0IsQ0FDdEMsQ0FBQSxlQUFxQix3QkFBMkIsQ0FBQSxlQUFxQixHQUFLLEVBQUMsT0FBTSxjQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOMkJyRyxlQUFhLEVNNUJ0QixFQUFDLFlBQW9CLENBQUEsT0FBTSxBQUFDLFdBQWtCLENBQ3RDLENBQUEsYUFBcUIsc0JBQTJCLENBQUEsYUFBcUIsR0FBSyxFQUFDLE9BQU0sWUFBbUIsQ0FEOUQsQUFDK0QsQ0FBQztFTjRCckcsZUFBYSxFTTdCdEIsRUFBQyxXQUFvQixDQUFBLE9BQU0sQUFBQyxVQUFrQixDQUN0QyxDQUFBLFlBQXFCLHFCQUEyQixDQUFBLFlBQXFCLEdBQUssRUFBQyxPQUFNLFdBQW1CLENBRDlELEFBQytELENBQUM7QU4rQjlHLEtBQUsscUJBQXFCLEFBQUMsQ0FBQyxJQUFHLEtBQUssQUFBQyxDQUFDLFNBQVEsQ0FBRyxRQUFNLENBQUMsQ0FBQyxRQUFRLEFBQUMsQ0FBQyxTQUFVLElBQUcsQ0FBRztBQUNqRixLQUFJLE9BQU0sS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUc7QUFDdEIsVUFBTSxBQUFDLENBQUMsSUFBRyxLQUFLLEFBQUMsQ0FBQyxTQUFRLENBQUcsUUFBTSxDQUFHLEtBQUcsQ0FBQyxDQUFDLENBQUM7RUFDOUM7QUFBQSxBQUNGLENBQUMsQ0FBQztBQUVLLE9BQVMsU0FBTyxDQUFFLEtBQUksQ0FBRyxDQUFBLE1BQUssQ0FBRztBQUN0QyxNQUFTLEdBQUEsQ0FBQSxDQUFBLEVBQUksRUFBQTtBQUFHLFFBQUUsRUFBSSxDQUFBLEtBQUksT0FBTyxDQUFHLENBQUEsQ0FBQSxFQUFJLElBQUUsQ0FBRyxDQUFBLENBQUEsRUFBRSxDQUFHO0FBQ2hELGVBQVcsQUFBQyxDQUFDLEtBQUksQ0FBRSxDQUFBLENBQUMsQ0FBRyxPQUFLLENBQUMsQ0FBQztFQUNoQztBQUFBLEFBQ0Y7QUFBQSxBQUVBLE9BQVMsYUFBVyxDQUFFLElBQUcsQ0FBRyxDQUFBLE1BQUssQ0FBRztBQUdsQyxBQUFJLElBQUEsQ0FBQSxNQUFLLENBQUM7QUFDVixJQUFJO0FBQ0YsU0FBSyxFQUFJLENBQUEsRUFBQyxhQUFhLEFBQUMsQ0FBQyxJQUFHLENBQUMsU0FBUyxBQUFDLEVBQUMsQ0FBQztFQUMzQyxDQUFFLE9BQU0sQ0FBQSxDQUFHO0FBQ1QsU0FBSyxNQUFNLEFBQUMsQ0FBQyx1QkFBc0IsRUFBSSxLQUFHLENBQUEsQ0FBSSxNQUFJLENBQUEsQ0FBSSxFQUFBLENBQUMsQ0FBQztBQUN4RCxVQUFNLEtBQUssQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0VBQ2pCO0FBQUEsQUFHSSxJQUFBLENBQUEsR0FBRSxDQUFDO0FBQ1AsSUFBSTtBQUNGLE1BQUUsRUFBSSxDQUFBLE9BQU0sTUFBTSxBQUFDLENBQUMsTUFBSyxDQUFHLEVBQzFCLEdBQUUsQ0FBRyxLQUFHLENBQ1YsQ0FBQyxDQUFDO0VBQ0osQ0FBRSxPQUFNLENBQUEsQ0FBRztBQUNULFNBQUssTUFBTSxBQUFDLENBQUMsQ0FBQSxRQUFRLEVBQUksSUFBRSxDQUFBLENBQUksS0FBRyxDQUFBLENBQUksSUFBRSxDQUFBLENBQUksQ0FBQSxDQUFBLFdBQVcsQ0FBQSxDQUFJLElBQUUsQ0FBQSxDQUFJLENBQUEsQ0FBQSxJQUFJLENBQUMsQ0FBQztBQUN2RSxVQUFNLEtBQUssQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0VBQ2pCO0FBQUEsQUFDQSxlQUFhLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUdwQixVQUFRO0FBQ1IsZUFBYSxBQUFDLENBQUMsR0FBRSxDQUFDLENBQUM7QUFDckI7QUFBQSIsImZpbGUiOiJjb21tYXNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSAyMDEzLTIwMTQgQnJ5YW4gSHVnaGVzIDxicnlhbkB0aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20+IChodHRwOi8vdGhlb3JldGljYWxpZGVhdGlvbnMuY29tKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgd3JlbmNoIGZyb20gJ3dyZW5jaCc7XG5pbXBvcnQgZXNwcmltYSBmcm9tICdlc3ByaW1hJztcbmltcG9ydCB7IHNldEN1cnJlbnRGaWxlIH0gZnJvbSAnLi9zdGF0ZSc7XG5pbXBvcnQgeyBwcm9jZXNzUHJvZ3JhbSB9IGZyb20gJy4vbm9kZSc7XG5cbi8vIExvYWQgdGhlIHJ1bGUgcHJvY2Vzc29yc1xud3JlbmNoLnJlYWRkaXJTeW5jUmVjdXJzaXZlKHBhdGguam9pbihfX2Rpcm5hbWUsICdydWxlcycpKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XG4gIGlmICgvXFwuanMkLy50ZXN0KGZpbGUpKSB7XG4gICAgcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAncnVsZXMnLCBmaWxlKSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGUoZmlsZXMsIGxvZ2dlcikge1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZmlsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YWxpZGF0ZUZpbGUoZmlsZXNbaV0sIGxvZ2dlcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVGaWxlKGZpbGUsIGxvZ2dlcikge1xuXG4gIC8vIFJlYWQgdGhlIGZpbGVcbiAgdmFyIHNvdXJjZTtcbiAgdHJ5IHtcbiAgICBzb3VyY2UgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSkudG9TdHJpbmcoKTtcbiAgfSBjYXRjaChlKSB7XG4gICAgbG9nZ2VyLmVycm9yKCdDb3VsZCBub3QgcmVhZCBmaWxlIFwiJyArIGZpbGUgKyAnXCI6ICcgKyBlKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cblxuICAvLyBQYXJzZSB0aGUgc291cmNlXG4gIHZhciBhc3Q7XG4gIHRyeSB7XG4gICAgYXN0ID0gZXNwcmltYS5wYXJzZShzb3VyY2UsIHtcbiAgICAgIGxvYzogdHJ1ZVxuICAgIH0pO1xuICB9IGNhdGNoKGUpIHtcbiAgICBsb2dnZXIuZXJyb3IoZS5tZXNzYWdlICsgJyAnICsgZmlsZSArICc6JyArIGUubGluZU51bWJlciArICc6JyArIGUuY29sKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cbiAgc2V0Q3VycmVudEZpbGUoZmlsZSk7XG5cbiAgLy8gVmFsaWRhdGUgdGhlIGZpbGVcbiAgZGVidWdnZXI7XG4gIHByb2Nlc3NQcm9ncmFtKGFzdCk7XG59XG4iLCJPYmplY3QuZGVmaW5lUHJvcGVydGllcyhleHBvcnRzLCAkX19wbGFjZWhvbGRlcl9fMCk7Iiwie2dldDogJF9fcGxhY2Vob2xkZXJfXzB9IiwiZ2V0ICRfX3BsYWNlaG9sZGVyX18wKCkgeyByZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzE7IH0iLCJfX2VzTW9kdWxlOiB0cnVlIiwie3ZhbHVlOiAkX19wbGFjZWhvbGRlcl9fMH0iLCIoJF9fcGxhY2Vob2xkZXJfXzAgPSByZXF1aXJlKCRfX3BsYWNlaG9sZGVyX18xKSwgXG4gICAgICAgICRfX3BsYWNlaG9sZGVyX18yICYmICRfX3BsYWNlaG9sZGVyX18zLl9fZXNNb2R1bGUgJiYgJF9fcGxhY2Vob2xkZXJfXzQgfHwge2RlZmF1bHQ6ICRfX3BsYWNlaG9sZGVyX181fSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=