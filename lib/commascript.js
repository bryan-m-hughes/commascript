"use strict";
Object.defineProperties(exports, {
  validate: {get: function() {
      return validate;
    }},
  __esModule: {value: true}
});
var $__fs__,
    $__path__,
    $__wrench__,
    $__esprima__,
    $__state__,
    $__node__;
var fs = ($__fs__ = require("fs"), $__fs__ && $__fs__.__esModule && $__fs__ || {default: $__fs__}).default;
var path = ($__path__ = require("path"), $__path__ && $__path__.__esModule && $__path__ || {default: $__path__}).default;
var wrench = ($__wrench__ = require("wrench"), $__wrench__ && $__wrench__.__esModule && $__wrench__ || {default: $__wrench__}).default;
var esprima = ($__esprima__ = require("esprima"), $__esprima__ && $__esprima__.__esModule && $__esprima__ || {default: $__esprima__}).default;
var state = ($__state__ = require("./state"), $__state__ && $__state__.__esModule && $__state__ || {default: $__state__}).default;
var node = ($__node__ = require("./node"), $__node__ && $__node__.__esModule && $__node__ || {default: $__node__}).default;
wrench.readdirSyncRecursive(path.join(__dirname, 'rules')).forEach(function(file) {
  if (/\.js$/.test(file)) {
    require(path.join(__dirname, 'rules', file));
  }
});
function validate(files, logger) {
  var i,
      len;
  for (i = 0, len = files.length; i < len; i++) {
    validateFile(files[i], logger);
  }
}
function validateFile(file, logger) {
  var source;
  var ast;
  try {
    source = fs.readFileSync(file).toString();
  } catch (e) {
    logger.error('Could not read file "' + file + '": ' + e);
    process.exit(1);
  }
  try {
    ast = esprima.parse(source, {loc: true});
  } catch (e) {
    logger.error(e.message + ' ' + file + ':' + e.lineNumber + ':' + e.col);
    process.exit(1);
  }
  state.setFilename(file);
  debugger;
  node.processProgram(ast);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1hc2NyaXB0LmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdCQTtBQ3hCQSxLQUFLLGlCQUFpQixBQUFDLENBQUMsT0FBTTtVQ0E5QixFQUFDLEdBQUUsWUNBcUI7QUFBRSxxQkFBd0I7SUFBRSxBREE5QixDQUFDO0FFQXZCLFdBQVMsQ0NBVCxFQUFDLEtBQUksQ0RBTyxLQUFHLEFDQVMsQ0FBQztDSkF5QixDQUFDOzs7Ozs7O0VEd0I1QyxHQUFDLEVNeEJSLEVBQUMsU0FBb0IsQ0FBQSxPQUFNLEFBQUMsTUFBa0IsQ0FDdEMsQ0FBQSxVQUFxQixtQkFBMkIsQ0FBQSxVQUFxQixHQUFLLEVBQUMsT0FBTSxTQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOd0J2RyxLQUFHLEVNekJWLEVBQUMsV0FBb0IsQ0FBQSxPQUFNLEFBQUMsUUFBa0IsQ0FDdEMsQ0FBQSxZQUFxQixxQkFBMkIsQ0FBQSxZQUFxQixHQUFLLEVBQUMsT0FBTSxXQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOeUJ2RyxPQUFLLEVNMUJaLEVBQUMsYUFBb0IsQ0FBQSxPQUFNLEFBQUMsVUFBa0IsQ0FDdEMsQ0FBQSxjQUFxQix1QkFBMkIsQ0FBQSxjQUFxQixHQUFLLEVBQUMsT0FBTSxhQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOMEJ2RyxRQUFNLEVNM0JiLEVBQUMsY0FBb0IsQ0FBQSxPQUFNLEFBQUMsV0FBa0IsQ0FDdEMsQ0FBQSxlQUFxQix3QkFBMkIsQ0FBQSxlQUFxQixHQUFLLEVBQUMsT0FBTSxjQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOMkJ2RyxNQUFJLEVNNUJYLEVBQUMsWUFBb0IsQ0FBQSxPQUFNLEFBQUMsV0FBa0IsQ0FDdEMsQ0FBQSxhQUFxQixzQkFBMkIsQ0FBQSxhQUFxQixHQUFLLEVBQUMsT0FBTSxZQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VONEJ2RyxLQUFHLEVNN0JWLEVBQUMsV0FBb0IsQ0FBQSxPQUFNLEFBQUMsVUFBa0IsQ0FDdEMsQ0FBQSxZQUFxQixxQkFBMkIsQ0FBQSxZQUFxQixHQUFLLEVBQUMsT0FBTSxXQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0FOK0I5RyxLQUFLLHFCQUFxQixBQUFDLENBQUMsSUFBRyxLQUFLLEFBQUMsQ0FBQyxTQUFRLENBQUcsUUFBTSxDQUFDLENBQUMsUUFBUSxBQUFDLENBQUMsU0FBVSxJQUFHLENBQUc7QUFDakYsS0FBSSxPQUFNLEtBQUssQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFHO0FBQ3RCLFVBQU0sQUFBQyxDQUFDLElBQUcsS0FBSyxBQUFDLENBQUMsU0FBUSxDQUFHLFFBQU0sQ0FBRyxLQUFHLENBQUMsQ0FBQyxDQUFDO0VBQzlDO0FBQUEsQUFDRixDQUFDLENBQUM7QUFFSyxPQUFTLFNBQU8sQ0FBRSxLQUFJLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDdEMsQUFBSSxJQUFBLENBQUEsQ0FBQTtBQUFHLFFBQUUsQ0FBQztBQUNWLE1BQUssQ0FBQSxFQUFJLEVBQUEsQ0FBRyxDQUFBLEdBQUUsRUFBSSxDQUFBLEtBQUksT0FBTyxDQUFHLENBQUEsQ0FBQSxFQUFJLElBQUUsQ0FBRyxDQUFBLENBQUEsRUFBRSxDQUFHO0FBQzVDLGVBQVcsQUFBQyxDQUFDLEtBQUksQ0FBRSxDQUFBLENBQUMsQ0FBRyxPQUFLLENBQUMsQ0FBQztFQUNoQztBQUFBLEFBQ0Y7QUFBQSxBQUVBLE9BQVMsYUFBVyxDQUFFLElBQUcsQ0FBRyxDQUFBLE1BQUssQ0FBRztBQUNsQyxBQUFJLElBQUEsQ0FBQSxNQUFLLENBQUM7QUFDVixBQUFJLElBQUEsQ0FBQSxHQUFFLENBQUM7QUFHUCxJQUFJO0FBQ0YsU0FBSyxFQUFJLENBQUEsRUFBQyxhQUFhLEFBQUMsQ0FBQyxJQUFHLENBQUMsU0FBUyxBQUFDLEVBQUMsQ0FBQztFQUMzQyxDQUFFLE9BQU0sQ0FBQSxDQUFHO0FBQ1QsU0FBSyxNQUFNLEFBQUMsQ0FBQyx1QkFBc0IsRUFBSSxLQUFHLENBQUEsQ0FBSSxNQUFJLENBQUEsQ0FBSSxFQUFBLENBQUMsQ0FBQztBQUN4RCxVQUFNLEtBQUssQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0VBQ2pCO0FBQUEsQUFHQSxJQUFJO0FBQ0YsTUFBRSxFQUFJLENBQUEsT0FBTSxNQUFNLEFBQUMsQ0FBQyxNQUFLLENBQUcsRUFDMUIsR0FBRSxDQUFHLEtBQUcsQ0FDVixDQUFDLENBQUM7RUFDSixDQUFFLE9BQU0sQ0FBQSxDQUFHO0FBQ1QsU0FBSyxNQUFNLEFBQUMsQ0FBQyxDQUFBLFFBQVEsRUFBSSxJQUFFLENBQUEsQ0FBSSxLQUFHLENBQUEsQ0FBSSxJQUFFLENBQUEsQ0FBSSxDQUFBLENBQUEsV0FBVyxDQUFBLENBQUksSUFBRSxDQUFBLENBQUksQ0FBQSxDQUFBLElBQUksQ0FBQyxDQUFDO0FBQ3ZFLFVBQU0sS0FBSyxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7RUFDakI7QUFBQSxBQUNBLE1BQUksWUFBWSxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7QUFHdkIsVUFBUTtBQUNSLEtBQUcsZUFBZSxBQUFDLENBQUMsR0FBRSxDQUFDLENBQUM7QUFDMUI7QUFBQSIsImZpbGUiOiJjb21tYXNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSAyMDEzLTIwMTQgQnJ5YW4gSHVnaGVzIDxicnlhbkB0aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20+IChodHRwOi8vdGhlb3JldGljYWxpZGVhdGlvbnMuY29tKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgd3JlbmNoIGZyb20gJ3dyZW5jaCc7XG5pbXBvcnQgZXNwcmltYSBmcm9tICdlc3ByaW1hJztcbmltcG9ydCBzdGF0ZSBmcm9tICcuL3N0YXRlJztcbmltcG9ydCBub2RlIGZyb20gJy4vbm9kZSc7XG5cbi8vIExvYWQgdGhlIHJ1bGUgcHJvY2Vzc29yc1xud3JlbmNoLnJlYWRkaXJTeW5jUmVjdXJzaXZlKHBhdGguam9pbihfX2Rpcm5hbWUsICdydWxlcycpKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XG4gIGlmICgvXFwuanMkLy50ZXN0KGZpbGUpKSB7XG4gICAgcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAncnVsZXMnLCBmaWxlKSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGUoZmlsZXMsIGxvZ2dlcikge1xuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBmaWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhbGlkYXRlRmlsZShmaWxlc1tpXSwgbG9nZ2VyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUZpbGUoZmlsZSwgbG9nZ2VyKSB7XG4gIHZhciBzb3VyY2U7XG4gIHZhciBhc3Q7XG5cbiAgLy8gUmVhZCB0aGUgZmlsZVxuICB0cnkge1xuICAgIHNvdXJjZSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlKS50b1N0cmluZygpO1xuICB9IGNhdGNoKGUpIHtcbiAgICBsb2dnZXIuZXJyb3IoJ0NvdWxkIG5vdCByZWFkIGZpbGUgXCInICsgZmlsZSArICdcIjogJyArIGUpO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxuXG4gIC8vIFBhcnNlIHRoZSBzb3VyY2VcbiAgdHJ5IHtcbiAgICBhc3QgPSBlc3ByaW1hLnBhcnNlKHNvdXJjZSwge1xuICAgICAgbG9jOiB0cnVlXG4gICAgfSk7XG4gIH0gY2F0Y2goZSkge1xuICAgIGxvZ2dlci5lcnJvcihlLm1lc3NhZ2UgKyAnICcgKyBmaWxlICsgJzonICsgZS5saW5lTnVtYmVyICsgJzonICsgZS5jb2wpO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxuICBzdGF0ZS5zZXRGaWxlbmFtZShmaWxlKTtcblxuICAvLyBWYWxpZGF0ZSB0aGUgZmlsZVxuICBkZWJ1Z2dlcjtcbiAgbm9kZS5wcm9jZXNzUHJvZ3JhbShhc3QpO1xufVxuIiwiT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZXhwb3J0cywgJF9fcGxhY2Vob2xkZXJfXzApOyIsIntnZXQ6ICRfX3BsYWNlaG9sZGVyX18wfSIsImdldCAkX19wbGFjZWhvbGRlcl9fMCgpIHsgcmV0dXJuICRfX3BsYWNlaG9sZGVyX18xOyB9IiwiX19lc01vZHVsZTogdHJ1ZSIsInt2YWx1ZTogJF9fcGxhY2Vob2xkZXJfXzB9IiwiKCRfX3BsYWNlaG9sZGVyX18wID0gcmVxdWlyZSgkX19wbGFjZWhvbGRlcl9fMSksIFxuICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiAmJiAkX19wbGFjZWhvbGRlcl9fMy5fX2VzTW9kdWxlICYmICRfX3BsYWNlaG9sZGVyX180IHx8IHtkZWZhdWx0OiAkX19wbGFjZWhvbGRlcl9fNX0pIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9