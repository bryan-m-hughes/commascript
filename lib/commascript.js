"use strict";
Object.defineProperties(exports, {
  validate: {get: function() {
      return validate;
    }},
  __esModule: {value: true}
});
var $__fs__,
    $__path__,
    $__wrench__,
    $__esprima__,
    $__state__,
    $__node__;
var fs = ($__fs__ = require("fs"), $__fs__ && $__fs__.__esModule && $__fs__ || {default: $__fs__}).default;
var path = ($__path__ = require("path"), $__path__ && $__path__.__esModule && $__path__ || {default: $__path__}).default;
var wrench = ($__wrench__ = require("wrench"), $__wrench__ && $__wrench__.__esModule && $__wrench__ || {default: $__wrench__}).default;
var esprima = ($__esprima__ = require("esprima"), $__esprima__ && $__esprima__.__esModule && $__esprima__ || {default: $__esprima__}).default;
var $__4 = ($__state__ = require("./state"), $__state__ && $__state__.__esModule && $__state__ || {default: $__state__}),
    setCurrentFile = $__4.setCurrentFile,
    enterState = $__4.enterState,
    exitState = $__4.exitState,
    states = $__4.states;
var processNode = ($__node__ = require("./node"), $__node__ && $__node__.__esModule && $__node__ || {default: $__node__}).processNode;
wrench.readdirSyncRecursive(path.join(__dirname, 'rules')).forEach(function(file) {
  if (/\.js$/.test(file)) {
    require(path.join(__dirname, 'rules', file));
  }
});
function validate(files, logger) {
  for (var i = 0,
      len = files.length; i < len; i++) {
    validateFile(files[i], logger);
  }
}
function validateFile(file, logger) {
  var source;
  try {
    source = fs.readFileSync(file).toString();
  } catch (e) {
    logger.error('Could not read file "' + file + '": ' + e);
    process.exit(1);
  }
  var ast;
  try {
    ast = esprima.parse(source, {loc: true});
  } catch (e) {
    logger.error(e.message + ' ' + file + ':' + e.lineNumber + ':' + e.col);
    process.exit(1);
  }
  setCurrentFile(file);
  enterState(states.SCANNING);
  debugger;
  processNode(ast);
  exitState();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1hc2NyaXB0LmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdCQTtBQ3hCQSxLQUFLLGlCQUFpQixBQUFDLENBQUMsT0FBTTtVQ0E5QixFQUFDLEdBQUUsWUNBcUI7QUFBRSxxQkFBd0I7SUFBRSxBREE5QixDQUFDO0FFQXZCLFdBQVMsQ0NBVCxFQUFDLEtBQUksQ0RBTyxLQUFHLEFDQVMsQ0FBQztDSkF5QixDQUFDOzs7Ozs7O0VEd0I1QyxHQUFDLEVNeEJSLEVBQUMsU0FBb0IsQ0FBQSxPQUFNLEFBQUMsTUFBa0IsQ0FDdEMsQ0FBQSxVQUFxQixtQkFBMkIsQ0FBQSxVQUFxQixHQUFLLEVBQUMsT0FBTSxTQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOd0J2RyxLQUFHLEVNekJWLEVBQUMsV0FBb0IsQ0FBQSxPQUFNLEFBQUMsUUFBa0IsQ0FDdEMsQ0FBQSxZQUFxQixxQkFBMkIsQ0FBQSxZQUFxQixHQUFLLEVBQUMsT0FBTSxXQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOeUJ2RyxPQUFLLEVNMUJaLEVBQUMsYUFBb0IsQ0FBQSxPQUFNLEFBQUMsVUFBa0IsQ0FDdEMsQ0FBQSxjQUFxQix1QkFBMkIsQ0FBQSxjQUFxQixHQUFLLEVBQUMsT0FBTSxhQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOMEJ2RyxRQUFNLEVNM0JiLEVBQUMsY0FBb0IsQ0FBQSxPQUFNLEFBQUMsV0FBa0IsQ0FDdEMsQ0FBQSxlQUFxQix3QkFBMkIsQ0FBQSxlQUFxQixHQUFLLEVBQUMsT0FBTSxjQUFtQixDQUQ5RCxBQUMrRCxDQUFDO1NBRDlHLEVBQUMsWUFBb0IsQ0FBQSxPQUFNLEFBQUMsV0FBa0IsQ0FDdEMsQ0FBQSxhQUFxQixzQkFBMkIsQ0FBQSxhQUFxQixHQUFLLEVBQUMsT0FBTSxZQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0FOMkJyRyxpQkFBYTtBQUFHLGFBQVM7QUFBRyxZQUFRO0FBQUcsU0FBSztFQUM1QyxZQUFVLEVNN0JuQixFQUFDLFdBQW9CLENBQUEsT0FBTSxBQUFDLFVBQWtCLENBQ3RDLENBQUEsWUFBcUIscUJBQTJCLENBQUEsWUFBcUIsR0FBSyxFQUFDLE9BQU0sV0FBbUIsQ0FEOUQsQUFDK0QsQ0FBQztBTitCOUcsS0FBSyxxQkFBcUIsQUFBQyxDQUFDLElBQUcsS0FBSyxBQUFDLENBQUMsU0FBUSxDQUFHLFFBQU0sQ0FBQyxDQUFDLFFBQVEsQUFBQyxDQUFDLFNBQVUsSUFBRyxDQUFHO0FBQ2pGLEtBQUksT0FBTSxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBRztBQUN0QixVQUFNLEFBQUMsQ0FBQyxJQUFHLEtBQUssQUFBQyxDQUFDLFNBQVEsQ0FBRyxRQUFNLENBQUcsS0FBRyxDQUFDLENBQUMsQ0FBQztFQUM5QztBQUFBLEFBQ0YsQ0FBQyxDQUFDO0FBRUssT0FBUyxTQUFPLENBQUUsS0FBSSxDQUFHLENBQUEsTUFBSyxDQUFHO0FBQ3RDLE1BQVMsR0FBQSxDQUFBLENBQUEsRUFBSSxFQUFBO0FBQUcsUUFBRSxFQUFJLENBQUEsS0FBSSxPQUFPLENBQUcsQ0FBQSxDQUFBLEVBQUksSUFBRSxDQUFHLENBQUEsQ0FBQSxFQUFFLENBQUc7QUFDaEQsZUFBVyxBQUFDLENBQUMsS0FBSSxDQUFFLENBQUEsQ0FBQyxDQUFHLE9BQUssQ0FBQyxDQUFDO0VBQ2hDO0FBQUEsQUFDRjtBQUFBLEFBRUEsT0FBUyxhQUFXLENBQUUsSUFBRyxDQUFHLENBQUEsTUFBSyxDQUFHO0FBR2xDLEFBQUksSUFBQSxDQUFBLE1BQUssQ0FBQztBQUNWLElBQUk7QUFDRixTQUFLLEVBQUksQ0FBQSxFQUFDLGFBQWEsQUFBQyxDQUFDLElBQUcsQ0FBQyxTQUFTLEFBQUMsRUFBQyxDQUFDO0VBQzNDLENBQUUsT0FBTSxDQUFBLENBQUc7QUFDVCxTQUFLLE1BQU0sQUFBQyxDQUFDLHVCQUFzQixFQUFJLEtBQUcsQ0FBQSxDQUFJLE1BQUksQ0FBQSxDQUFJLEVBQUEsQ0FBQyxDQUFDO0FBQ3hELFVBQU0sS0FBSyxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7RUFDakI7QUFBQSxBQUdJLElBQUEsQ0FBQSxHQUFFLENBQUM7QUFDUCxJQUFJO0FBQ0YsTUFBRSxFQUFJLENBQUEsT0FBTSxNQUFNLEFBQUMsQ0FBQyxNQUFLLENBQUcsRUFDMUIsR0FBRSxDQUFHLEtBQUcsQ0FDVixDQUFDLENBQUM7RUFDSixDQUFFLE9BQU0sQ0FBQSxDQUFHO0FBQ1QsU0FBSyxNQUFNLEFBQUMsQ0FBQyxDQUFBLFFBQVEsRUFBSSxJQUFFLENBQUEsQ0FBSSxLQUFHLENBQUEsQ0FBSSxJQUFFLENBQUEsQ0FBSSxDQUFBLENBQUEsV0FBVyxDQUFBLENBQUksSUFBRSxDQUFBLENBQUksQ0FBQSxDQUFBLElBQUksQ0FBQyxDQUFDO0FBQ3ZFLFVBQU0sS0FBSyxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7RUFDakI7QUFBQSxBQUNBLGVBQWEsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0FBS3BCLFdBQVMsQUFBQyxDQUFDLE1BQUssU0FBUyxDQUFDLENBQUM7QUFDM0IsVUFBUTtBQUNSLFlBQVUsQUFBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDO0FBQ2hCLFVBQVEsQUFBQyxFQUFDLENBQUM7QUFDYjtBQUFBIiwiZmlsZSI6ImNvbW1hc2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG5Db3B5cmlnaHQgKGMpIDIwMTMtMjAxNCBCcnlhbiBIdWdoZXMgPGJyeWFuQHRoZW9yZXRpY2FsaWRlYXRpb25zLmNvbT4gKGh0dHA6Ly90aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20pXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB3cmVuY2ggZnJvbSAnd3JlbmNoJztcbmltcG9ydCBlc3ByaW1hIGZyb20gJ2VzcHJpbWEnO1xuaW1wb3J0IHsgc2V0Q3VycmVudEZpbGUsIGVudGVyU3RhdGUsIGV4aXRTdGF0ZSwgc3RhdGVzIH0gZnJvbSAnLi9zdGF0ZSc7XG5pbXBvcnQgeyBwcm9jZXNzTm9kZSB9IGZyb20gJy4vbm9kZSc7XG5cbi8vIExvYWQgdGhlIHJ1bGUgcHJvY2Vzc29yc1xud3JlbmNoLnJlYWRkaXJTeW5jUmVjdXJzaXZlKHBhdGguam9pbihfX2Rpcm5hbWUsICdydWxlcycpKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XG4gIGlmICgvXFwuanMkLy50ZXN0KGZpbGUpKSB7XG4gICAgcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAncnVsZXMnLCBmaWxlKSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGUoZmlsZXMsIGxvZ2dlcikge1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZmlsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YWxpZGF0ZUZpbGUoZmlsZXNbaV0sIGxvZ2dlcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVGaWxlKGZpbGUsIGxvZ2dlcikge1xuXG4gIC8vIFJlYWQgdGhlIGZpbGVcbiAgdmFyIHNvdXJjZTtcbiAgdHJ5IHtcbiAgICBzb3VyY2UgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSkudG9TdHJpbmcoKTtcbiAgfSBjYXRjaChlKSB7XG4gICAgbG9nZ2VyLmVycm9yKCdDb3VsZCBub3QgcmVhZCBmaWxlIFwiJyArIGZpbGUgKyAnXCI6ICcgKyBlKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cblxuICAvLyBQYXJzZSB0aGUgc291cmNlXG4gIHZhciBhc3Q7XG4gIHRyeSB7XG4gICAgYXN0ID0gZXNwcmltYS5wYXJzZShzb3VyY2UsIHtcbiAgICAgIGxvYzogdHJ1ZVxuICAgIH0pO1xuICB9IGNhdGNoKGUpIHtcbiAgICBsb2dnZXIuZXJyb3IoZS5tZXNzYWdlICsgJyAnICsgZmlsZSArICc6JyArIGUubGluZU51bWJlciArICc6JyArIGUuY29sKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cbiAgc2V0Q3VycmVudEZpbGUoZmlsZSk7XG5cbiAgLy8gVE9ETzogc2V0IGZpbGVuYW1lIG9uIGFsbCBub2Rlc1xuXG4gIC8vIFZhbGlkYXRlIHRoZSBmaWxlXG4gIGVudGVyU3RhdGUoc3RhdGVzLlNDQU5OSU5HKTtcbiAgZGVidWdnZXI7XG4gIHByb2Nlc3NOb2RlKGFzdCk7XG4gIGV4aXRTdGF0ZSgpO1xufVxuIiwiT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZXhwb3J0cywgJF9fcGxhY2Vob2xkZXJfXzApOyIsIntnZXQ6ICRfX3BsYWNlaG9sZGVyX18wfSIsImdldCAkX19wbGFjZWhvbGRlcl9fMCgpIHsgcmV0dXJuICRfX3BsYWNlaG9sZGVyX18xOyB9IiwiX19lc01vZHVsZTogdHJ1ZSIsInt2YWx1ZTogJF9fcGxhY2Vob2xkZXJfXzB9IiwiKCRfX3BsYWNlaG9sZGVyX18wID0gcmVxdWlyZSgkX19wbGFjZWhvbGRlcl9fMSksIFxuICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiAmJiAkX19wbGFjZWhvbGRlcl9fMy5fX2VzTW9kdWxlICYmICRfX3BsYWNlaG9sZGVyX180IHx8IHtkZWZhdWx0OiAkX19wbGFjZWhvbGRlcl9fNX0pIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9