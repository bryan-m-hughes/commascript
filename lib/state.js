"use strict";
Object.defineProperties(exports, {
  handleError: {get: function() {
      return handleError;
    }},
  handleInternalError: {get: function() {
      return handleInternalError;
    }},
  getCurrentFile: {get: function() {
      return getCurrentFile;
    }},
  setCurrentFile: {get: function() {
      return setCurrentFile;
    }},
  states: {get: function() {
      return states;
    }},
  getState: {get: function() {
      return getState;
    }},
  enterState: {get: function() {
      return enterState;
    }},
  exitState: {get: function() {
      return exitState;
    }},
  getCurrentContext: {get: function() {
      return getCurrentContext;
    }},
  enterContext: {get: function() {
      return enterContext;
    }},
  exitContext: {get: function() {
      return exitContext;
    }},
  lookupNamedType: {get: function() {
      return lookupNamedType;
    }},
  addNamedType: {get: function() {
      return addNamedType;
    }},
  __esModule: {value: true}
});
var stack = [];
var state = [];
var currentFile = '';
function handleError(node, message) {
  console.error(message + ' ' + currentFile + ':' + node.start.line + ':' + node.start.col);
}
function handleInternalError(message) {
  throw new Error('Internal Error: ' + message + ' This is a bug. Please report it to the project author');
}
function getCurrentFile() {
  return currentFile;
}
function setCurrentFile(file) {
  currentFile = file;
}
var states = {
  SCANNING: 'SCANNING',
  PARSING_STATEMENT: 'PARSING_STATEMENT',
  PARSING_EXPRESSION: 'PARSING_EXPRESSION',
  DECLARING: 'DECLARING'
};
function getState() {
  return state[state.length - 1];
}
function enterState(newState) {
  state.push(newState);
}
function exitState() {
  state.pop();
}
function getCurrentContext() {
  return stack[stack.length - 1];
}
function enterContext(config) {
  stack.push({
    symbolTable: {},
    expectedReturnType: config.expectedReturnType
  });
}
function exitContext() {
  stack.pop();
}
function lookupNamedType(name) {
  for (var i = stack.length - 1; i >= 0; i--) {
    var type = stack[i].symbolTable[name];
    if (type) {
      return type;
    }
  }
}
function addNamedType(name, type) {
  getCurrentContext().symbolTable[name] = type;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YXRlLmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QkE7QUN4QkEsS0FBSyxpQkFBaUIsQUFBQyxDQUFDLE9BQU07YUNBOUIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsd0JBQXdCO0lBQUUsQURBOUIsQ0FBQztxQkFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsZ0NBQXdCO0lBQUUsQURBOUIsQ0FBQztnQkFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsMkJBQXdCO0lBQUUsQURBOUIsQ0FBQztnQkFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsMkJBQXdCO0lBQUUsQURBOUIsQ0FBQztRQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSxtQkFBd0I7SUFBRSxBREE5QixDQUFDO1VBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLHFCQUF3QjtJQUFFLEFEQTlCLENBQUM7WUFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsdUJBQXdCO0lBQUUsQURBOUIsQ0FBQztXQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSxzQkFBd0I7SUFBRSxBREE5QixDQUFDO21CQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSw4QkFBd0I7SUFBRSxBREE5QixDQUFDO2NBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLHlCQUF3QjtJQUFFLEFEQTlCLENBQUM7YUFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsd0JBQXdCO0lBQUUsQURBOUIsQ0FBQztpQkFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsNEJBQXdCO0lBQUUsQURBOUIsQ0FBQztjQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSx5QkFBd0I7SUFBRSxBREE5QixDQUFDO0FFQXZCLFdBQVMsQ0NBVCxFQUFDLEtBQUksQ0RBTyxLQUFHLEFDQVMsQ0FBQztDSkF5QixDQUFDO0FEd0JuRCxBQUFJLEVBQUEsQ0FBQSxLQUFJLEVBQUksR0FBQyxDQUFDO0FBQ2QsQUFBSSxFQUFBLENBQUEsS0FBSSxFQUFJLEdBQUMsQ0FBQztBQUNkLEFBQUksRUFBQSxDQUFBLFdBQVUsRUFBSSxHQUFDLENBQUM7QUFFYixPQUFTLFlBQVUsQ0FBRSxJQUFHLENBQUcsQ0FBQSxPQUFNLENBQUc7QUFDekMsUUFBTSxNQUFNLEFBQUMsQ0FBQyxPQUFNLEVBQUksSUFBRSxDQUFBLENBQUksWUFBVSxDQUFBLENBQUksSUFBRSxDQUFBLENBQUksQ0FBQSxJQUFHLE1BQU0sS0FBSyxDQUFBLENBQUksSUFBRSxDQUFBLENBQUksQ0FBQSxJQUFHLE1BQU0sSUFBSSxDQUFDLENBQUM7QUFDM0Y7QUFBQSxBQUVPLE9BQVMsb0JBQWtCLENBQUUsT0FBTSxDQUFHO0FBQzNDLE1BQU0sSUFBSSxNQUFJLEFBQUMsQ0FBQyxrQkFBaUIsRUFBSSxRQUFNLENBQUEsQ0FDekMseURBQXVELENBQUMsQ0FBQztBQUM3RDtBQUFBLEFBRU8sT0FBUyxlQUFhLENBQUMsQUFBQyxDQUFFO0FBQy9CLE9BQU8sWUFBVSxDQUFDO0FBQ3BCO0FBQUEsQUFFTyxPQUFTLGVBQWEsQ0FBRSxJQUFHLENBQUc7QUFDbkMsWUFBVSxFQUFJLEtBQUcsQ0FBQztBQUNwQjtBQUFBLEFBRVcsRUFBQSxDQUFBLE1BQUssRUFBSTtBQUNsQixTQUFPLENBQUcsV0FBUztBQUNuQixrQkFBZ0IsQ0FBRyxvQkFBa0I7QUFDckMsbUJBQWlCLENBQUcscUJBQW1CO0FBQ3ZDLFVBQVEsQ0FBRyxZQUFVO0FBQUEsQUFDdkIsQ0FBQztBQUVNLE9BQVMsU0FBTyxDQUFDLEFBQUMsQ0FBRTtBQUN6QixPQUFPLENBQUEsS0FBSSxDQUFFLEtBQUksT0FBTyxFQUFJLEVBQUEsQ0FBQyxDQUFDO0FBQ2hDO0FBQUEsQUFFTyxPQUFTLFdBQVMsQ0FBRSxRQUFPLENBQUc7QUFDbkMsTUFBSSxLQUFLLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQUN0QjtBQUFBLEFBRU8sT0FBUyxVQUFRLENBQUMsQUFBQyxDQUFFO0FBQzFCLE1BQUksSUFBSSxBQUFDLEVBQUMsQ0FBQztBQUNiO0FBQUEsQUFFTyxPQUFTLGtCQUFnQixDQUFDLEFBQUMsQ0FBRTtBQUNsQyxPQUFPLENBQUEsS0FBSSxDQUFFLEtBQUksT0FBTyxFQUFJLEVBQUEsQ0FBQyxDQUFDO0FBQ2hDO0FBQUEsQUFFTyxPQUFTLGFBQVcsQ0FBRSxNQUFLLENBQUc7QUFDbkMsTUFBSSxLQUFLLEFBQUMsQ0FBQztBQUNULGNBQVUsQ0FBRyxHQUFDO0FBQ2QscUJBQWlCLENBQUcsQ0FBQSxNQUFLLG1CQUFtQjtBQUFBLEVBQzlDLENBQUMsQ0FBQztBQUNKO0FBQUEsQUFFTyxPQUFTLFlBQVUsQ0FBQyxBQUFDLENBQUU7QUFDNUIsTUFBSSxJQUFJLEFBQUMsRUFBQyxDQUFDO0FBQ2I7QUFBQSxBQUVPLE9BQVMsZ0JBQWMsQ0FBRSxJQUFHLENBQUc7QUFDcEMsTUFBUyxHQUFBLENBQUEsQ0FBQSxFQUFJLENBQUEsS0FBSSxPQUFPLEVBQUksRUFBQSxDQUFHLENBQUEsQ0FBQSxHQUFLLEVBQUEsQ0FBRyxDQUFBLENBQUEsRUFBRSxDQUFHO0FBQzFDLEFBQUksTUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLEtBQUksQ0FBRSxDQUFBLENBQUMsWUFBWSxDQUFFLElBQUcsQ0FBQyxDQUFDO0FBQ3JDLE9BQUksSUFBRyxDQUFHO0FBQ1IsV0FBTyxLQUFHLENBQUM7SUFDYjtBQUFBLEVBQ0Y7QUFBQSxBQUNGO0FBQUEsQUFFTyxPQUFTLGFBQVcsQ0FBRSxJQUFHLENBQUcsQ0FBQSxJQUFHLENBQUc7QUFDdkMsa0JBQWdCLEFBQUMsRUFBQyxZQUFZLENBQUUsSUFBRyxDQUFDLEVBQUksS0FBRyxDQUFDO0FBQzlDO0FBQUEiLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbkNvcHlyaWdodCAoYykgMjAxMy0yMDE0IEJyeWFuIEh1Z2hlcyA8YnJ5YW5AdGhlb3JldGljYWxpZGVhdGlvbnMuY29tPiAoaHR0cDovL3RoZW9yZXRpY2FsaWRlYXRpb25zLmNvbSlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuKi9cblxudmFyIHN0YWNrID0gW107XG52YXIgc3RhdGUgPSBbXTtcbnZhciBjdXJyZW50RmlsZSA9ICcnO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRXJyb3Iobm9kZSwgbWVzc2FnZSkge1xuICBjb25zb2xlLmVycm9yKG1lc3NhZ2UgKyAnICcgKyBjdXJyZW50RmlsZSArICc6JyArIG5vZGUuc3RhcnQubGluZSArICc6JyArIG5vZGUuc3RhcnQuY29sKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUludGVybmFsRXJyb3IobWVzc2FnZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0ludGVybmFsIEVycm9yOiAnICsgbWVzc2FnZSArXG4gICAgJyBUaGlzIGlzIGEgYnVnLiBQbGVhc2UgcmVwb3J0IGl0IHRvIHRoZSBwcm9qZWN0IGF1dGhvcicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudEZpbGUoKSB7XG4gIHJldHVybiBjdXJyZW50RmlsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEN1cnJlbnRGaWxlKGZpbGUpIHtcbiAgY3VycmVudEZpbGUgPSBmaWxlO1xufVxuXG5leHBvcnQgdmFyIHN0YXRlcyA9IHtcbiAgU0NBTk5JTkc6ICdTQ0FOTklORycsXG4gIFBBUlNJTkdfU1RBVEVNRU5UOiAnUEFSU0lOR19TVEFURU1FTlQnLFxuICBQQVJTSU5HX0VYUFJFU1NJT046ICdQQVJTSU5HX0VYUFJFU1NJT04nLFxuICBERUNMQVJJTkc6ICdERUNMQVJJTkcnXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gIHJldHVybiBzdGF0ZVtzdGF0ZS5sZW5ndGggLSAxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVudGVyU3RhdGUobmV3U3RhdGUpIHtcbiAgc3RhdGUucHVzaChuZXdTdGF0ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGl0U3RhdGUoKSB7XG4gIHN0YXRlLnBvcCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudENvbnRleHQoKSB7XG4gIHJldHVybiBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVudGVyQ29udGV4dChjb25maWcpIHtcbiAgc3RhY2sucHVzaCh7XG4gICAgc3ltYm9sVGFibGU6IHt9LFxuICAgIGV4cGVjdGVkUmV0dXJuVHlwZTogY29uZmlnLmV4cGVjdGVkUmV0dXJuVHlwZVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4aXRDb250ZXh0KCkge1xuICBzdGFjay5wb3AoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvb2t1cE5hbWVkVHlwZShuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciB0eXBlID0gc3RhY2tbaV0uc3ltYm9sVGFibGVbbmFtZV07XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkTmFtZWRUeXBlKG5hbWUsIHR5cGUpIHtcbiAgZ2V0Q3VycmVudENvbnRleHQoKS5zeW1ib2xUYWJsZVtuYW1lXSA9IHR5cGU7XG59XG4iLCJPYmplY3QuZGVmaW5lUHJvcGVydGllcyhleHBvcnRzLCAkX19wbGFjZWhvbGRlcl9fMCk7Iiwie2dldDogJF9fcGxhY2Vob2xkZXJfXzB9IiwiZ2V0ICRfX3BsYWNlaG9sZGVyX18wKCkgeyByZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzE7IH0iLCJfX2VzTW9kdWxlOiB0cnVlIiwie3ZhbHVlOiAkX19wbGFjZWhvbGRlcl9fMH0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=