"use strict";
Object.defineProperties(exports, {
  handleError: {get: function() {
      return handleError;
    }},
  handleInternalError: {get: function() {
      return handleInternalError;
    }},
  getRelativeCurrentFile: {get: function() {
      return getRelativeCurrentFile;
    }},
  getCurrentFile: {get: function() {
      return getCurrentFile;
    }},
  setCurrentFile: {get: function() {
      return setCurrentFile;
    }},
  states: {get: function() {
      return states;
    }},
  getState: {get: function() {
      return getState;
    }},
  enterState: {get: function() {
      return enterState;
    }},
  exitState: {get: function() {
      return exitState;
    }},
  getCurrentContext: {get: function() {
      return getCurrentContext;
    }},
  enterContext: {get: function() {
      return enterContext;
    }},
  exitContext: {get: function() {
      return exitContext;
    }},
  lookupNamedType: {get: function() {
      return lookupNamedType;
    }},
  addNamedType: {get: function() {
      return addNamedType;
    }},
  __esModule: {value: true}
});
var path = require('path');
var stack = [];
var state = [];
var currentFile = '';
function handleError(node, message) {
  console.error(message + ' ' + getCurrentFile() + ':' + node.loc.start.line + ':' + node.loc.start.column);
}
function handleInternalError(message) {
  throw new Error('Internal Error: ' + message + ' This is a bug. Please report it to the project author');
}
function getRelativeCurrentFile() {
  return getCurrentFile().replace(process.cwd() + path.sep, '');
}
function getCurrentFile() {
  return currentFile;
}
function setCurrentFile(file) {
  currentFile = file;
}
var states = {
  SCANNING: 'SCANNING',
  PARSING_STATEMENT: 'PARSING_STATEMENT',
  PARSING_EXPRESSION: 'PARSING_EXPRESSION',
  DECLARING: 'DECLARING'
};
function getState() {
  return state[state.length - 1];
}
function enterState(newState) {
  state.push(newState);
}
function exitState() {
  state.pop();
}
function getCurrentContext() {
  return stack[stack.length - 1];
}
function enterContext(config) {
  stack.push({
    symbolTable: {},
    expectedReturnType: config.expectedReturnType
  });
}
function exitContext() {
  stack.pop();
}
function lookupNamedType(name) {
  for (var i = stack.length - 1; i >= 0; i--) {
    var type = stack[i].symbolTable[name];
    if (type) {
      return type;
    }
  }
}
function addNamedType(name, type) {
  getCurrentContext().symbolTable[name] = type;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YXRlLmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QkE7QUN4QkEsS0FBSyxpQkFBaUIsQUFBQyxDQUFDLE9BQU07YUNBOUIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsd0JBQXdCO0lBQUUsQURBOUIsQ0FBQztxQkFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsZ0NBQXdCO0lBQUUsQURBOUIsQ0FBQzt3QkFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsbUNBQXdCO0lBQUUsQURBOUIsQ0FBQztnQkFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsMkJBQXdCO0lBQUUsQURBOUIsQ0FBQztnQkFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsMkJBQXdCO0lBQUUsQURBOUIsQ0FBQztRQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSxtQkFBd0I7SUFBRSxBREE5QixDQUFDO1VBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLHFCQUF3QjtJQUFFLEFEQTlCLENBQUM7WUFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsdUJBQXdCO0lBQUUsQURBOUIsQ0FBQztXQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSxzQkFBd0I7SUFBRSxBREE5QixDQUFDO21CQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSw4QkFBd0I7SUFBRSxBREE5QixDQUFDO2NBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLHlCQUF3QjtJQUFFLEFEQTlCLENBQUM7YUFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsd0JBQXdCO0lBQUUsQURBOUIsQ0FBQztpQkFBdkIs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QUFFLENBQUc7QUFDMUMsQUFBSSxNQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsS0FBSSxDQUFFLENBQUEsQ0FBQyxZQUFZLENBQUUsSUFBRyxDQUFDLENBQUM7QUFDckMsT0FBSSxJQUFHLENBQUc7QUFDUixXQUFPLEtBQUcsQ0FBQztJQUNiO0FBQUEsRUFDRjtBQUFBLEFBQ0Y7QUFBQSxBQUVPLE9BQVMsYUFBVyxDQUFFLElBQUcsQ0FBRyxDQUFBLElBQUcsQ0FBRztBQUN2QyxrQkFBZ0IsQUFBQyxFQUFDLFlBQVksQ0FBRSxJQUFHLENBQUMsRUFBSSxLQUFHLENBQUM7QUFDOUM7QUFBQSIsImZpbGUiOiJzdGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSAyMDEzLTIwMTQgQnJ5YW4gSHVnaGVzIDxicnlhbkB0aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20+IChodHRwOi8vdGhlb3JldGljYWxpZGVhdGlvbnMuY29tKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG4qL1xuXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxudmFyIHN0YWNrID0gW107XG52YXIgc3RhdGUgPSBbXTtcbnZhciBjdXJyZW50RmlsZSA9ICcnO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRXJyb3Iobm9kZSwgbWVzc2FnZSkge1xuICBjb25zb2xlLmVycm9yKG1lc3NhZ2UgKyAnICcgKyBnZXRDdXJyZW50RmlsZSgpICsgJzonICsgbm9kZS5sb2Muc3RhcnQubGluZSArICc6JyArIG5vZGUubG9jLnN0YXJ0LmNvbHVtbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVJbnRlcm5hbEVycm9yKG1lc3NhZ2UpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdJbnRlcm5hbCBFcnJvcjogJyArIG1lc3NhZ2UgK1xuICAgICcgVGhpcyBpcyBhIGJ1Zy4gUGxlYXNlIHJlcG9ydCBpdCB0byB0aGUgcHJvamVjdCBhdXRob3InKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlbGF0aXZlQ3VycmVudEZpbGUoKSB7XG4gIHJldHVybiBnZXRDdXJyZW50RmlsZSgpLnJlcGxhY2UocHJvY2Vzcy5jd2QoKSArIHBhdGguc2VwLCAnJylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRGaWxlKCkge1xuICByZXR1cm4gY3VycmVudEZpbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRDdXJyZW50RmlsZShmaWxlKSB7XG4gIGN1cnJlbnRGaWxlID0gZmlsZTtcbn1cblxuZXhwb3J0IHZhciBzdGF0ZXMgPSB7XG4gIFNDQU5OSU5HOiAnU0NBTk5JTkcnLFxuICBQQVJTSU5HX1NUQVRFTUVOVDogJ1BBUlNJTkdfU1RBVEVNRU5UJyxcbiAgUEFSU0lOR19FWFBSRVNTSU9OOiAnUEFSU0lOR19FWFBSRVNTSU9OJyxcbiAgREVDTEFSSU5HOiAnREVDTEFSSU5HJ1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICByZXR1cm4gc3RhdGVbc3RhdGUubGVuZ3RoIC0gMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnRlclN0YXRlKG5ld1N0YXRlKSB7XG4gIHN0YXRlLnB1c2gobmV3U3RhdGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhpdFN0YXRlKCkge1xuICBzdGF0ZS5wb3AoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRDb250ZXh0KCkge1xuICByZXR1cm4gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnRlckNvbnRleHQoY29uZmlnKSB7XG4gIHN0YWNrLnB1c2goe1xuICAgIHN5bWJvbFRhYmxlOiB7fSxcbiAgICBleHBlY3RlZFJldHVyblR5cGU6IGNvbmZpZy5leHBlY3RlZFJldHVyblR5cGVcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGl0Q29udGV4dCgpIHtcbiAgc3RhY2sucG9wKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb29rdXBOYW1lZFR5cGUobmFtZSkge1xuICBmb3IgKHZhciBpID0gc3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgdHlwZSA9IHN0YWNrW2ldLnN5bWJvbFRhYmxlW25hbWVdO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZE5hbWVkVHlwZShuYW1lLCB0eXBlKSB7XG4gIGdldEN1cnJlbnRDb250ZXh0KCkuc3ltYm9sVGFibGVbbmFtZV0gPSB0eXBlO1xufVxuIiwiT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZXhwb3J0cywgJF9fcGxhY2Vob2xkZXJfXzApOyIsIntnZXQ6ICRfX3BsYWNlaG9sZGVyX18wfSIsImdldCAkX19wbGFjZWhvbGRlcl9fMCgpIHsgcmV0dXJuICRfX3BsYWNlaG9sZGVyX18xOyB9IiwiX19lc01vZHVsZTogdHJ1ZSIsInt2YWx1ZTogJF9fcGxhY2Vob2xkZXJfXzB9Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9