"use strict";
Object.defineProperties(exports, {
  getCurrentFile: {get: function() {
      return getCurrentFile;
    }},
  setCurrentFile: {get: function() {
      return setCurrentFile;
    }},
  handleError: {get: function() {
      return handleError;
    }},
  handleInternalError: {get: function() {
      return handleInternalError;
    }},
  enterContext: {get: function() {
      return enterContext;
    }},
  exitContext: {get: function() {
      return exitContext;
    }},
  getCurrentContext: {get: function() {
      return getCurrentContext;
    }},
  lookupNamedType: {get: function() {
      return lookupNamedType;
    }},
  addNamedType: {get: function() {
      return addNamedType;
    }},
  __esModule: {value: true}
});
var stack = [];
var currentFile = '';
function getCurrentFile() {
  return currentFile;
}
function setCurrentFile(file) {
  currentFile = file;
}
function handleError(node, message) {
  console.error(message + ' ' + currentFile + ':' + node.start.line + ':' + node.start.col);
}
function handleInternalError(message) {
  throw new Error('Internal Error: ' + message + ' This is a bug. Please report it to the project author');
}
function enterContext(config) {
  stack.push({
    symbolTable: {},
    expectedReturnType: config.expectedReturnType
  });
}
function exitContext() {
  stack.pop();
}
function getCurrentContext() {
  return stack[stack.length - 1];
}
function lookupNamedType(name) {
  for (var i = stack.length - 1; i >= 0; i--) {
    var type = stack[i].symbolTable[name];
    if (type) {
      return type;
    }
  }
}
function addNamedType(name, type) {
  getCurrentContext().symbolTable[name] = type;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YXRlLmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QkE7QUN4QkEsS0FBSyxpQkFBaUIsQUFBQyxDQUFDLE9BQU07Z0JDQTlCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLDJCQUF3QjtJQUFFLEFEQTlCLENBQUM7Z0JBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLDJCQUF3QjtJQUFFLEFEQTlCLENBQUM7YUFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsd0JBQXdCO0lBQUUsQURBOUIsQ0FBQztxQkFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsZ0NBQXdCO0lBQUUsQURBOUIsQ0FBQztjQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSx5QkFBd0I7SUFBRSxBREE5QixDQUFDO2FBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLHdCQUF3QjtJQUFFLEFEQTlCLENBQUM7bUJBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLDhCQUF3QjtJQUFFLEFEQTlCLENBQUM7aUJBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLDRCQUF3QjtJQUFFLEFEQTlCLENBQUM7Y0FBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUseUJBQXdCO0lBQUUsQURBOUIsQ0FBQztBRUF2QixXQUFTLENDQVQsRUFBQyxLQUFJLENEQU8sS0FBRyxBQ0FTLENBQUM7Q0pBeUIsQ0FBQztBRHdCbkQsQUFBSSxFQUFBLENBQUEsS0FBSSxFQUFJLEdBQUMsQ0FBQztBQUNkLEFBQUksRUFBQSxDQUFBLFdBQVUsRUFBSSxHQUFDLENBQUM7QUFFYixPQUFTLGVBQWEsQ0FBQyxBQUFDLENBQUU7QUFDL0IsT0FBTyxZQUFVLENBQUM7QUFDcEI7QUFBQSxBQUVPLE9BQVMsZUFBYSxDQUFFLElBQUcsQ0FBRztBQUNuQyxZQUFVLEVBQUksS0FBRyxDQUFDO0FBQ3BCO0FBQUEsQUFFTyxPQUFTLFlBQVUsQ0FBRSxJQUFHLENBQUcsQ0FBQSxPQUFNLENBQUc7QUFDekMsUUFBTSxNQUFNLEFBQUMsQ0FBQyxPQUFNLEVBQUksSUFBRSxDQUFBLENBQUksWUFBVSxDQUFBLENBQUksSUFBRSxDQUFBLENBQUksQ0FBQSxJQUFHLE1BQU0sS0FBSyxDQUFBLENBQUksSUFBRSxDQUFBLENBQUksQ0FBQSxJQUFHLE1BQU0sSUFBSSxDQUFDLENBQUM7QUFDM0Y7QUFBQSxBQUVPLE9BQVMsb0JBQWtCLENBQUUsT0FBTSxDQUFHO0FBQzNDLE1BQU0sSUFBSSxNQUFJLEFBQUMsQ0FBQyxrQkFBaUIsRUFBSSxRQUFNLENBQUEsQ0FDekMseURBQXVELENBQUMsQ0FBQztBQUM3RDtBQUFBLEFBRU8sT0FBUyxhQUFXLENBQUUsTUFBSyxDQUFHO0FBQ25DLE1BQUksS0FBSyxBQUFDLENBQUM7QUFDVCxjQUFVLENBQUcsR0FBQztBQUNkLHFCQUFpQixDQUFHLENBQUEsTUFBSyxtQkFBbUI7QUFBQSxFQUM5QyxDQUFDLENBQUM7QUFDSjtBQUFBLEFBRU8sT0FBUyxZQUFVLENBQUMsQUFBQyxDQUFFO0FBQzVCLE1BQUksSUFBSSxBQUFDLEVBQUMsQ0FBQztBQUNiO0FBQUEsQUFFTyxPQUFTLGtCQUFnQixDQUFDLEFBQUMsQ0FBRTtBQUNsQyxPQUFPLENBQUEsS0FBSSxDQUFFLEtBQUksT0FBTyxFQUFJLEVBQUEsQ0FBQyxDQUFDO0FBQ2hDO0FBQUEsQUFFTyxPQUFTLGdCQUFjLENBQUUsSUFBRyxDQUFHO0FBQ3BDLE1BQVMsR0FBQSxDQUFBLENBQUEsRUFBSSxDQUFBLEtBQUksT0FBTyxFQUFJLEVBQUEsQ0FBRyxDQUFBLENBQUEsR0FBSyxFQUFBLENBQUcsQ0FBQSxDQUFBLEVBQUUsQ0FBRztBQUMxQyxBQUFJLE1BQUEsQ0FBQSxJQUFHLEVBQUksQ0FBQSxLQUFJLENBQUUsQ0FBQSxDQUFDLFlBQVksQ0FBRSxJQUFHLENBQUMsQ0FBQztBQUNyQyxPQUFJLElBQUcsQ0FBRztBQUNSLFdBQU8sS0FBRyxDQUFDO0lBQ2I7QUFBQSxFQUNGO0FBQUEsQUFDRjtBQUFBLEFBRU8sT0FBUyxhQUFXLENBQUUsSUFBRyxDQUFHLENBQUEsSUFBRyxDQUFHO0FBQ3ZDLGtCQUFnQixBQUFDLEVBQUMsWUFBWSxDQUFFLElBQUcsQ0FBQyxFQUFJLEtBQUcsQ0FBQztBQUM5QztBQUFBIiwiZmlsZSI6InN0YXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG5Db3B5cmlnaHQgKGMpIDIwMTMtMjAxNCBCcnlhbiBIdWdoZXMgPGJyeWFuQHRoZW9yZXRpY2FsaWRlYXRpb25zLmNvbT4gKGh0dHA6Ly90aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20pXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cbiovXG5cbnZhciBzdGFjayA9IFtdO1xudmFyIGN1cnJlbnRGaWxlID0gJyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50RmlsZSgpIHtcbiAgcmV0dXJuIGN1cnJlbnRGaWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q3VycmVudEZpbGUoZmlsZSkge1xuICBjdXJyZW50RmlsZSA9IGZpbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVFcnJvcihub2RlLCBtZXNzYWdlKSB7XG4gIGNvbnNvbGUuZXJyb3IobWVzc2FnZSArICcgJyArIGN1cnJlbnRGaWxlICsgJzonICsgbm9kZS5zdGFydC5saW5lICsgJzonICsgbm9kZS5zdGFydC5jb2wpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlSW50ZXJuYWxFcnJvcihtZXNzYWdlKSB7XG4gIHRocm93IG5ldyBFcnJvcignSW50ZXJuYWwgRXJyb3I6ICcgKyBtZXNzYWdlICtcbiAgICAnIFRoaXMgaXMgYSBidWcuIFBsZWFzZSByZXBvcnQgaXQgdG8gdGhlIHByb2plY3QgYXV0aG9yJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnRlckNvbnRleHQoY29uZmlnKSB7XG4gIHN0YWNrLnB1c2goe1xuICAgIHN5bWJvbFRhYmxlOiB7fSxcbiAgICBleHBlY3RlZFJldHVyblR5cGU6IGNvbmZpZy5leHBlY3RlZFJldHVyblR5cGVcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGl0Q29udGV4dCgpIHtcbiAgc3RhY2sucG9wKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50Q29udGV4dCgpIHtcbiAgcmV0dXJuIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9va3VwTmFtZWRUeXBlKG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IHN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHR5cGUgPSBzdGFja1tpXS5zeW1ib2xUYWJsZVtuYW1lXTtcbiAgICBpZiAodHlwZSkge1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGROYW1lZFR5cGUobmFtZSwgdHlwZSkge1xuICBnZXRDdXJyZW50Q29udGV4dCgpLnN5bWJvbFRhYmxlW25hbWVdID0gdHlwZTtcbn1cbiIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGV4cG9ydHMsICRfX3BsYWNlaG9sZGVyX18wKTsiLCJ7Z2V0OiAkX19wbGFjZWhvbGRlcl9fMH0iLCJnZXQgJF9fcGxhY2Vob2xkZXJfXzAoKSB7IHJldHVybiAkX19wbGFjZWhvbGRlcl9fMTsgfSIsIl9fZXNNb2R1bGU6IHRydWUiLCJ7dmFsdWU6ICRfX3BsYWNlaG9sZGVyX18wfSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==