Create macro/preprocess/loader/whatever construct
* CommonJS and RequireJS, where return value varies, type system instrospects a little further

Integrate with other products
* Custom/forked version of RequireJS that runs compilation before evaling script
    * Ability to enable/disable in dev/prod?

Make type table scoped

Functions:
* Functions can either be constructors or functions, but not both
    * ```new``` must be used with a constructor, and must not be used with a function
    * constructors must not return a value
    * Determine whether or not something is a constructor based on whether or not it's prototype is changed
    * functions must not have properties attached to it
    * constructors may have properties attached to it
    * Need to do a quick look-ahead to determine if something is a function or a constructor
* Functions are generic by default
    * Return type and argument types are set to '@generic'
    * When parsing function body, attempt to infer the type
    * If values are not inferred from the body, infer from what it's being called with and set to
    * If the return type cannot be inferred (i.e. generic return value is being discarded), ignore it

Scoping/Data Flow:
* Traverse tree using built-in walker until you find a CommaScript block, then switch over to using .getType()
    * Can remove state.isContextCommascript() calls
    * Named types are stored in inner-most block AST node, not in type
    * Allows for multiple passes over tree
* Need to do multi-pass analysis to determine function generics, especially when objects are arguments
